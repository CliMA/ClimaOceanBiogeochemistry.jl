var documenterSearchIndex = {"docs":
[{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"EditURL = \"../../../examples/single_column_carbon_alkalinity_nutrients.jl\"","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Simple-carbon-cycle-biogeochemistry-model","page":"Single column carbon, alkalinity, nutrients","title":"Simple carbon cycle biogeochemistry model","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"This example illustrates how to use ClimaOceanBiogeochemistry's CarbonAlkalinityNutrients model in a single column context.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"using ClimaOceanBiogeochemistry: CarbonAlkalinityNutrients\nusing ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver: UniversalRobustCarbonSystem\nusing ClimaOceanBiogeochemistry.CarbonSystemSolvers: CarbonSystemParameters, CarbonSolverParameters, CarbonCoefficientParameters\n\nusing Oceananigans\nusing Oceananigans.Units\nusing Oceananigans.TurbulenceClosures: CATKEVerticalDiffusivity\n\nusing Adapt\nusing KernelAbstractions: @kernel, @index\nusing Oceananigans.Utils: launch!\nusing Printf\nusing CairoMakie\n\narch = CPU()","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#A-single-column-grid","page":"Single column carbon, alkalinity, nutrients","title":"A single column grid","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We set up a single column grid with 4 m grid spacing that's 256 m deep:","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"grid = RectilinearGrid(\n    arch,\n    size = 512,\n    z = (-4096, 0),\n    topology = (\n        Flat, Flat, Bounded\n     ),\n)","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Buoyancy-that-depends-on-temperature-and-salinity","page":"Single column carbon, alkalinity, nutrients","title":"Buoyancy that depends on temperature and salinity","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We use the SeawaterBuoyancy model with a linear equation of state, where thermal expansion","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"αᵀ = 2e-4\n#and haline contraction\nβˢ = 8e-4\nnothing #hide","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Boundary-conditions","page":"Single column carbon, alkalinity, nutrients","title":"Boundary conditions","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We calculate the surface temperature flux associated with surface cooling of 200 W m⁻², reference density ρₒ, and heat capacity cᴾ, To illustrate the dynamics of CarbonAlkalinityNutrients, this strong convection drives turbulent mixing for 4 days, and then abruptly shuts off. Once the convective turbulence dies down, plankton start to grow.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"Qʰ = 200.0  # W m⁻², surface _heat_ flux\nρₒ = 1026.0 # kg m⁻³, average density at the surface of the world ocean\ncᴾ = 3991.0 # J K⁻¹ kg⁻¹, typical heat capacity for seawater\n\nQᵀ(t) = ifelse(t < 30days, Qʰ / (ρₒ * cᴾ), 0.0) # K m s⁻¹, surface _temperature_ flux\n\nT_bcs = FieldBoundaryConditions(\n    top = FluxBoundaryCondition(Qᵀ)\n    )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"For air-sea CO₂ fluxes, we use a FluxBoundaryCondition for the \"top\" of the DIC tracer. We'll write a callback to calculate the flux every time step.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"co₂_flux = Field{Center, Center, Nothing}(grid)\n\ndic_bcs  = FieldBoundaryConditions(\n    top = FluxBoundaryCondition(co₂_flux)\n    )\n\n# These are filled in compute_co₂_flux!\nocean_pCO₂ = Field{Center, Center, Nothing}(grid)\natmos_pCO₂ = Field{Center, Center, Nothing}(grid)\npH         = Field{Center, Center, Nothing}(grid)\nset!(pH, 8.0)\n\ncmhr⁻¹_per_ms⁻¹ = 1 / 3.6e5 # conversion factor from cm/hr to m/s\n\n# Supply some coefficients and external data for the CO₂ flux calculation\nBase.@kwdef struct CO₂_flux_parameters\n    surface_wind_speed   = 10. # ms⁻¹\n    applied_pressure     = 0.0 # atm\n    atmospheric_pCO₂     = 280e-6 # atm\n    exchange_coefficient = 0.337 # cm hr⁻¹\n    reference_density    = 1024.5 # kg m⁻³\nend\nadapt_structure(\n    to, cp::CO₂_flux_parameters\n    ) = CO₂_flux_parameters(\n           adapt(to, cp.surface_wind_speed),\n           adapt(to, cp.applied_pressure),\n           adapt(to, cp.atmospheric_pCO₂),\n           adapt(to, cp.exchange_coefficient),\n           adapt(to, cp.reference_density),\n)\n\n\"\"\"\n    compute_schmidt_dic(\n        grid,\n        schmidt_number_dic,\n        temperature,\n        )\n\nCompute the Schmidt number for dissolved inorganic carbon (DIC) based on the temperature Θᶜ (in degrees Celsius).\n\nArguments:\n- `grid::RectilinearGrid`: The model grid.\n- `schmidt_number_dic::Field{Center, Center, Nothing}`: The computed Schmidt number for DIC.\n- `temperature::Field{Center, Center, Nothing}`: Temperature in degrees Celsius.\n- `kˢᶜ::CarbonCoefficientParameters`: The parameters for the Schmidt number calculation.\n\"\"\"\n@kernel function compute_schmidt_dic!(\n    grid,\n    schmidt_number_dic,\n    temperature,\n    kˢᶜ = CarbonCoefficientParameters(\n            a₀ = 2116.8,\n            a₁ = 136.25,\n            a₂ = 4.7353,\n            a₃ = 9.2307e-2,\n            a₄ = 7.555e-4,\n            a₅ = 660.0,\n        ),\n    )\n\n    i, j = @index(Global, NTuple)\n    k = size(grid, 3)\n\n    schmidt_number_dic[i, j, 1] =  (\n         kˢᶜ.a₀ -\n         kˢᶜ.a₁ * temperature[i, j, k] +\n         kˢᶜ.a₂ * temperature[i, j, k]^2 -\n         kˢᶜ.a₃ * temperature[i, j, k]^3 +\n         kˢᶜ.a₄ * temperature[i, j, k]^4\n    ) /  kˢᶜ.a₅\nend\n\n\"\"\"\n    compute_piston_velocity(\n        grid,\n        piston_velocity,\n        surface_wind_speed,\n        exchange_coefficient,\n        schmidt_number,\n        )\n\nCompute the piston velocity for gas exchange at the ocean surface.\n\nArguments:\n- `grid::RectilinearGrid`: The model grid.\n- `piston_velocity::Field{Center, Center, Nothing}`: The computed piston velocity.\n- `surface_wind_speed::Field{Center, Center, Nothing}`: The wind speed at the ocean surface.\n- `exchange_coefficient::Float64`: The gas exchange coefficient.\n- `schmidt_number::Field{Center, Center, Nothing}`: The Schmidt number.\n\"\"\"\n@kernel function compute_piston_velocity!(\n    grid,\n    piston_velocity,\n    surface_wind_speed,\n    exchange_coefficient,\n    schmidt_number\n    )\n\n    i, j = @index(Global, NTuple)\n\n    piston_velocity[i, j, 1] = exchange_coefficient[i, j, 1] *\n                               surface_wind_speed[i, j, 1]^2 /\n                               sqrt(schmidt_number[i, j, 1])\nend\n\n\"\"\"\n    solve_ocean_pCO₂!(\n        grid,\n        reference_density,\n        ocean_pCO₂,\n        atmospheric_CO₂_solubility,\n        oceanic_CO₂_solubility,\n        Θᶜ, Sᴬ, Δpᵦₐᵣ, Cᵀ, Aᵀ, Pᵀ, Siᵀ, pH, pCO₂ᵃᵗᵐ\n        )\n\nCompute the oceanic pCO₂ using the UniversalRobustCarbonSystem solver.\n\nArguments:\n- `grid::RectilinearGrid`: The model grid.\n- `reference_density::Float64`: The reference density of seawater.\n- `ocean_pCO₂::Field{Center, Center, Nothing}`: The computed oceanic pCO₂.\n- `atmospheric_CO₂_solubility::Field{Center, Center, Nothing}`: The solubility of CO₂ in the atmosphere.\n- `oceanic_CO₂_solubility::Field{Center, Center, Nothing}`: The solubility of CO₂ in the ocean.\n- `Θᶜ::Field{Center, Center, Nothing}`: Temperature in degrees Celsius.\n- `Sᴬ::Field{Center, Center, Nothing}`: Salinity in PSU.\n- `Δpᵦₐᵣ::Field{Center, Center, Nothing}`: Applied pressure in atm.\n- `Cᵀ::Field{Center, Center, Nothing}`: Total dissolved inorganic carbon (DIC) in mol kg⁻¹.\n- `Aᵀ::Field{Center, Center, Nothing}`: Total alkalinity (ALK) in mol kg⁻¹.\n- `Pᵀ::Field{Center, Center, Nothing}`: Phosphate concentration in mol kg⁻¹.\n- `pH::Field{Center, Center, Center}`: The computed pH.\n- `pCO₂ᵃᵗᵐ::Field{Center, Center, Nothing}`: The partial pressure of CO₂ in the atmosphere.\n\"\"\"\n@kernel function solve_ocean_pCO₂!(\n    grid,\n    solver_params,\n    reference_density,\n    ocean_pCO₂,\n    atmospheric_CO₂_solubility,\n    oceanic_CO₂_solubility,\n    temperature,\n    salinity,\n    applied_pressure_bar,\n    DIC,\n    ALK,\n    PO4,\n    pH,\n    atmosphere_pCO₂\n    )\n\n    i, j = @index(Global, NTuple)\n    k = size(grid, 3)\n\n    # compute oceanic pCO₂ using the UniversalRobustCarbonSystem solver\n    CarbonSolved = UniversalRobustCarbonSystem(;\n                        pH      = pH[i, j, 1],\n                        pCO₂ᵃᵗᵐ = atmosphere_pCO₂[i, j, 1],\n                        Θᶜ      = temperature[i, j, k],\n                        Sᴬ      = salinity[i, j, k],\n                        Δpᵦₐᵣ   = applied_pressure_bar[i, j, 1],\n                        Cᵀ      = DIC[i, j, k]/reference_density,\n                        Aᵀ      = ALK[i, j, k]/reference_density,\n                        Pᵀ      = PO4[i, j, k]/reference_density,\n                        solver_params...,\n    )\n\n    ocean_pCO₂[i, j, 1]                 = CarbonSolved.pCO₂ᵒᶜᵉ\n    atmospheric_CO₂_solubility[i, j, 1] = CarbonSolved.Pᵈⁱᶜₖₛₒₗₐ\n    oceanic_CO₂_solubility[i, j, 1]     = CarbonSolved.Pᵈⁱᶜₖₛₒₗₒ\n    pH[i, j, 1]                         = CarbonSolved.pH\nend\n\n\"\"\"\n    compute_CO₂_flux(\n        grid,\n        CO₂_flux,\n        piston_velocity,\n        atmospheric_pCO₂,\n        oceanic_pCO₂,\n        atmospheric_CO₂_solubility,\n        oceanic_CO₂_solubility,\n        reference_density\n    )\n\nCompute the flux of CO₂ between the atmosphere and the ocean.\n\nArguments:\n- `grid::RectilinearGrid`: The model grid.\n- `reference_density::Float64`: The reference density of seawater.\n- `CO₂_flux::Field{Center, Center, Nothing}`: The computed CO₂ flux.\n- `piston_velocity::Field{Center, Center, Nothing}`: The piston velocity for gas exchange at the ocean surface.\n- `atmospheric_pCO₂::Float64`: The partial pressure of CO₂ in the atmosphere.\n- `oceanic_pCO₂::Field{Center, Center, Nothing}`: The partial pressure of CO₂ in the ocean.\n- `atmospheric_CO₂_solubility::Field{Center, Center, Nothing}`: The solubility of CO₂ in the atmosphere.\n- `oceanic_CO₂_solubility::Field{Center, Center, Nothing}`: The solubility of CO₂ in the ocean.\n\nNotes:\nThe convention is that a positive flux is upwards (outgassing), and a negative flux is downwards (uptake).\n\"\"\"\n@kernel function compute_CO₂_flux!(\n    grid,\n    reference_density,\n    CO₂_flux,\n    piston_velocity,\n    atmospheric_pCO₂,\n    oceanic_pCO₂,\n    atmospheric_CO₂_solubility,\n    oceanic_CO₂_solubility,\n    )\n    i, j = @index(Global, NTuple)\n\n    # compute CO₂ flux (-ve for uptake, +ve for outgassing since convention is +ve upwards)\n    CO₂_flux[i, j, 1] = - piston_velocity[i, j, 1] * (\n                 atmospheric_pCO₂[i, j, 1] * atmospheric_CO₂_solubility[i, j, 1] -\n                 oceanic_pCO₂[i, j, 1]     * oceanic_CO₂_solubility[i, j, 1]\n            ) * reference_density # Convert mol kg⁻¹ m s⁻¹ to mol m⁻² s⁻¹\nend\n\n\"\"\"\n    calculate_air_sea_carbon_exchange!(simulation; solver_params = ())\n\nReturns the tendency of DIC in the top layer due to air-sea CO₂ flux\nusing the piston velocity formulation of Wanninkhof (1992) and the\nsolubility/activity of CO₂ in seawater.\n\"\"\"\n@inline function calculate_air_sea_carbon_exchange!(simulation, solver_params = ())\n    grid = simulation.model.grid\n\n# get coefficients from CO₂_flux_parameters struct\n# I really want the option to take these from the model\n    (; surface_wind_speed,\n        applied_pressure,\n        atmospheric_pCO₂,\n        exchange_coefficient,\n        reference_density,\n        ) = CO₂_flux_parameters()\n\n    # Access model fields\n    CO₂_flux = simulation.model.tracers.DIC.boundary_conditions.top.condition\n    temperature = simulation.model.tracers.T\n    salinity    = simulation.model.tracers.S\n    DIC         = simulation.model.tracers.DIC\n    ALK         = simulation.model.tracers.ALK\n    PO₄         = simulation.model.tracers.PO₄\n\n    # compute schmidt number for DIC\n    schmidt_dic = Field{Center, Center, Nothing}(grid)\n    set!(schmidt_dic, 0)\n\n    kernel_args = (\n        grid,\n        schmidt_dic,\n        temperature,\n    )\n\n    launch!(arch,\n\t    grid,\n\t    :xy,\n\t    compute_schmidt_dic!,\n\t    kernel_args...,\n    )\n\n    # compute gas exchange coefficient/piston velocity and correct with Schmidt number\n    wind_speed = Field{Center, Center, Nothing}(grid)\n    set!(wind_speed, surface_wind_speed)\n\n    average_exchange_coefficient = Field{Center, Center, Nothing}(grid)\n    set!(average_exchange_coefficient, exchange_coefficient*cmhr⁻¹_per_ms⁻¹)\n\n    piston_velocity = Field{Center, Center, Nothing}(grid)\n    set!(piston_velocity, 0)\n\n    kernel_args = (\n        grid,\n        piston_velocity,\n        wind_speed,\n        average_exchange_coefficient,\n        schmidt_dic,\n        )\n\n    # This is a 2d only kernel, so no need for custom kernel_size to handle slicing of 3d inputs\n    launch!(arch,\n\t    grid,\n\t    :xy,\n\t    compute_piston_velocity!,\n\t    kernel_args...,\n    )\n\n    # compute oceanic pCO₂ using the UniversalRobustCarbonSystem solver\n    set!(atmos_pCO₂, atmospheric_pCO₂)\n\n    applied_pressure_bar = Field{Center, Center, Nothing}(grid)\n    set!(applied_pressure_bar, applied_pressure)\n\n    atmospheric_CO₂_solubility = Field{Center, Center, Nothing}(grid)\n    oceanic_CO₂_solubility     = Field{Center, Center, Nothing}(grid)\n\n    kernel_args = (\n        grid,\n        solver_params,\n        reference_density,\n        ocean_pCO₂,\n        atmospheric_CO₂_solubility,\n        oceanic_CO₂_solubility,\n        temperature,\n        salinity,\n        applied_pressure_bar,\n        DIC,\n        ALK,\n        PO₄,\n        pH,\n        atmos_pCO₂,\n        )\n\n    launch!(arch,\n\t    grid,\n\t    :xy,\n\t    solve_ocean_pCO₂!,\n\t    kernel_args...,\n    )\n\n    # compute CO₂ flux (-ve for uptake, +ve for outgassing since convention is +ve upwards)\n    kernel_args = (\n        grid,\n        reference_density,\n        CO₂_flux,\n        piston_velocity,\n        atmos_pCO₂,\n        ocean_pCO₂,\n        atmospheric_CO₂_solubility,\n        oceanic_CO₂_solubility,\n        )\n\n    launch!(arch,\n\t    grid,\n\t    :xy,\n\t    compute_CO₂_flux!,\n\t    kernel_args...,\n    )\n    return nothing\nend","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#We-put-the-pieces-together","page":"Single column carbon, alkalinity, nutrients","title":"We put the pieces together","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"The important line here is biogeochemistry = CarbonAlkalinityNutrients(; grid). We adjust some of the parameters of the model to make the simulation more interesting.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"model = HydrostaticFreeSurfaceModel(;\n    grid,\n    biogeochemistry     = CarbonAlkalinityNutrients(; grid,\n                            maximum_net_community_production_rate = 1/365.25day,\n                            PAR_attenuation_scale = 100.,\n                            particulate_organic_phosphorus_sinking_velocity = -10 / day,\n                            ),\n    closure             = ScalarDiffusivity(κ=1e-4),\n    tracers             = (\n        :T, :S, :DIC, :ALK, :PO₄, :NO₃, :DOP, :POP, :Fe\n        ),\n    tracer_advection    = WENO(),\n    buoyancy            = SeawaterBuoyancy(\n        equation_of_state  = LinearEquationOfState(\n            thermal_expansion  = αᵀ,\n            haline_contraction = βˢ\n            ),\n        ),\n    boundary_conditions = (;\n        T=T_bcs, DIC=dic_bcs\n        ),\n    )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Initial-conditions","page":"Single column carbon, alkalinity, nutrients","title":"Initial conditions","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"Temperature initial condition: a stable density gradient with random noise superposed. Random noise damped at top and bottom we also impose a temperature gradient dTdz","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"dTdz = 0.02 # K m⁻¹\n\n# Random noise\nΞ(z) = randn() * z / model.grid.Lz * (1 + z / model.grid.Lz)\nzᶜʳⁱᵗ = -500\nfᶻ = dTdz * model.grid.Lz * 1e-6","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"Temperature profile","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"Tᵢ(z) = ifelse(\n                z > zᶜʳⁱᵗ,\n                20 + dTdz * z + fᶻ * Ξ(z),\n                20 + dTdz * zᶜʳⁱᵗ + fᶻ * Ξ(z),\n        )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We initialize the model with reasonable salinity and carbon/alkalinity/nutrient concentrations","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"Sᵢ(z)   = 35.0  # psu\nDICᵢ(z) = 2.1   # mol/m³\nALKᵢ(z) = 2.35   # mol/m³\nPO₄ᵢ(z) = 2.5e-3 # mol/m³\nNO₃ᵢ(z) = 42e-3  # mol/m³\nDOPᵢ(z) = 0.0    # mol/m³\nPOPᵢ(z) = 0.0    # mol/m³\nFeᵢ(z)  = 2.e-6  # mol/m³\n\nset!(\n    model,\n    T   = Tᵢ,\n    S   = Sᵢ,\n    DIC = DICᵢ,\n    ALK = ALKᵢ,\n    PO₄ = PO₄ᵢ,\n    NO₃ = NO₃ᵢ,\n    DOP = DOPᵢ,\n    POP = POPᵢ,\n    Fe  = Feᵢ\n    )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#A-simulation-of-physical-biological-interaction","page":"Single column carbon, alkalinity, nutrients","title":"A simulation of physical-biological interaction","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We run the simulation for 30 days with a time-step of 10 minutes.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"simulation = Simulation(\n    model,\n    Δt=1minute,\n    stop_time=365.25days\n    )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We add a TimeStepWizard callback to adapt the simulation's time-step...","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"wizard = TimeStepWizard(\n    cfl=0.2,\n    max_change=1.1,\n    max_Δt=60minutes\n    )\n\nsimulation.callbacks[:wizard] = Callback(\n    wizard,\n    IterationInterval(100),\n    )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"...and we emit a message with information on DIC, ALK, and CO₂ flux tendencies.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"DIC₀ = Field{Center, Center, Nothing}(grid)\nALK₀ = Field{Center, Center, Nothing}(grid)\n\"\"\"\nFunction to print DIC, ALK, and CO₂ flux tendency during the simulation\n\"\"\"\nfunction progress(simulation)\n    @printf(\"Iteration: %d, time: %s\\n\",\n        iteration(simulation),\n        prettytime(simulation),\n        )\n    Nz = size(simulation.model.grid, 3)\n\n    if iteration(simulation) == 1\n        # Establish and set initial values for the anomaly fields\n        DIC₀[1, 1, 1] = simulation.model.tracers.DIC[1, 1, Nz]\n        ALK₀[1, 1, 1] = simulation.model.tracers.ALK[1, 1, Nz]\n    else\n        @printf(\"Surface DIC tendency (x10⁻⁷ mol m⁻³ s⁻¹): %.12f\\n\",\n            ((simulation.model.tracers.DIC[1, 1, grid.Nz]-\n                DIC₀[1, 1, 1])/simulation.model.timestepper.previous_Δt\n                ) * 1e7)\n        @printf(\"Surface ALK tendency (x10⁻⁷ mol m⁻³ s⁻¹): %.12f\\n\",\n            ((simulation.model.tracers.ALK[1, 1, grid.Nz]-\n                ALK₀[1, 1, 1])/simulation.model.timestepper.previous_Δt\n                ) * 1e7)\n        @printf(\"Surface CO₂ flux (x10⁻⁷ mol m⁻³ s⁻¹): %.12f\\n\",\n            (simulation.model.tracers.DIC.boundary_conditions.top.condition[1,1]\n            ) * 1e7)\n\n        # update the anomaly fields\n        DIC₀[1, 1, 1] = simulation.model.tracers.DIC[1, 1, Nz]\n        ALK₀[1, 1, 1] = simulation.model.tracers.ALK[1, 1, Nz]\n    end\nend\n\nsimulation.callbacks[:progress] = Callback(\n    progress,\n    IterationInterval(100),\n    )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"Dont forget to add the callback to compute the CO₂ flux","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"add_callback!(simulation, calculate_air_sea_carbon_exchange!)","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"Output writer","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"filename = \"single_column_carbon_alkalinity_nutrients.jld2\"\nfout=10days\nsimulation.output_writers[:fields] = JLD2OutputWriter(\n    model, model.tracers;\n    filename,\n    schedule = TimeInterval(fout),\n    overwrite_existing = true,\n    )\n\nfilename_diags = \"single_column_carbon_alkalinity_nutrients_co2flux.jld2\"\n\noutputs = (; co₂_flux, ocean_pCO₂, atmos_pCO₂)\nsimulation.output_writers[:jld2] = JLD2OutputWriter(\n    model, outputs;\n    filename = filename_diags,\n    schedule = TimeInterval(fout),\n    overwrite_existing = true,\n    )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Run-the-example","page":"Single column carbon, alkalinity, nutrients","title":"Run the example","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"run!(simulation)","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Visualization","page":"Single column carbon, alkalinity, nutrients","title":"Visualization","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"All that's left is to visualize the results.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"Tt   = FieldTimeSeries(filename, \"T\")\nSt   = FieldTimeSeries(filename, \"S\")\nDICt = FieldTimeSeries(filename, \"DIC\")\nAlkt = FieldTimeSeries(filename, \"ALK\")\nPO₄t = FieldTimeSeries(filename, \"PO₄\")\nNO₃t = FieldTimeSeries(filename, \"NO₃\")\nDOPt = FieldTimeSeries(filename, \"DOP\")\nPOPt = FieldTimeSeries(filename, \"POP\")\nFet  = FieldTimeSeries(filename, \"Fe\")\nCO₂t = FieldTimeSeries(filename_diags, \"co₂_flux\")\napCO₂t = FieldTimeSeries(filename_diags, \"atmos_pCO₂\")\nopCO₂t = FieldTimeSeries(filename_diags, \"ocean_pCO₂\")\n\ntt = Tt.times\nnt = length(tt)\nz  = znodes(Tt)\n\nCO₂_flux_time_series   = [CO₂t[1, 1, 1, i] for i in 1:nt]\npCO₂_ocean_time_series = [opCO₂t[1, 1, 1, i] for i in 1:nt]\npCO₂_atmos_time_series = [apCO₂t[1, 1, 1, i] for i in 1:nt]\n\nfig = Figure(size=(1200, 1200))\nn = Observable(1)\n\naxb = Axis(\n    fig[1:4, 1],\n    xlabel=\"Temperature (K)\",\n    ylabel=\"z (m)\",\n    )\naxC = Axis(\n    fig[1:4, 2],\n    xlabel=\"DIC/ALK Concentration (mol m⁻³)\",\n    )\naxN = Axis(\n    fig[1:4, 3],\n    xlabel=\"Inorganic Nutrient concentration (mol m⁻³)\",\n    )\naxD = Axis(\n    fig[1:4, 4],\n    xlabel=\"Organic Nutrient concentration (mol m⁻³)\",\n    )\naxF = Axis(\n    fig[5:6, 1:4],\n    ylabel=\"Air-sea CO₂ fluxes (x1e7 mol m⁻² s⁻¹)\",\n    xlabel=\"Time (days)\",\n    )\naxP = Axis(\n    fig[5:6, 1:4],\n    ylabel=\"pCO₂ (μatm)\",\n    yticklabelcolor = :red,\n    yaxisposition = :right,\n    )\n\nxlims!(axb, 7, 21)\nxlims!(axC, 1.8, 2.6)\nxlims!(axN, -5, 75)\nxlims!(axD, -50, 250)\nxlims!(axF, -1, 1+simulation.stop_time/days)\nxlims!(axP, -1, 1+simulation.stop_time/days)\nylims!(axF, -8, 2)\nylims!(axP, 0, 500)\n\n#slider = Slider(fig[2, 1:4], range=1:nt, startvalue=1)\n#n = slider.value\n\ntitle = @lift @sprintf(\n    \"Convecting nutrients at t = %d days\", tt[$n] / days\n    )\nLabel(fig[0, 1:4], title)\n\nTn = @lift interior(Tt[$n], 1, 1, :)\nDICn = @lift interior(DICt[$n], 1, 1, :)\nAlkn = @lift interior(Alkt[$n], 1, 1, :)\nPO₄n = @lift interior(PO₄t[$n], 1, 1, :) * 16 * 1e3\nNO₃n = @lift interior(NO₃t[$n], 1, 1, :) * 1e3\nDOPn = @lift interior(DOPt[$n], 1, 1, :) * 1e6\nPOPn = @lift interior(POPt[$n], 1, 1, :) * 1e6\nFen  = @lift interior(Fet[$n],  1, 1, :) * 1e7\nCO₂_flux_points = Observable(\n    Point2f[(tt[1],\n    (CO₂_flux_time_series[1] * 1e7))]\n    )\npCO₂_ocean_points = Observable(\n    Point2f[(tt[1],\n    (pCO₂_ocean_time_series[1] * 1e6))]\n    )\npCO₂_atmos_points = Observable(\n    Point2f[(tt[1],\n    (pCO₂_atmos_time_series[1] * 1e6))]\n    )\n\nlines!(axb, Tn,   z)\nlines!(axC, DICn, z, label=\"DIC\")\nlines!(axC, Alkn, z, label=\"ALK\")\nlines!(axN, PO₄n, z, label=\"Phosphate (x16e-3)\")\nlines!(axN, NO₃n, z, label=\"Nitrate (x1e-3)\")\nlines!(axN, Fen,  z, label=\"Iron (x1e-7)\")\nlines!(axD, DOPn, z, label=\"DOP (x1e-6)\")\nlines!(axD, POPn, z, label=\"POP (x1e-6)\")\n\nscatter!(axP,\n    pCO₂_ocean_points;\n    marker = :circle,\n    markersize = 4,\n    color = :blue,\n    label=\"ocean pCO₂\",\n    )\nscatter!(axP,\n    pCO₂_atmos_points;\n    marker = :circle,\n    markersize = 4,\n    color = :red,\n    label=\"atmos pCO₂\",\n    )\nscatter!(axF,\n    CO₂_flux_points;\n    marker = :circle,\n    markersize = 4,\n    color = :black,\n    )\n\naxislegend(axC,position=:cb)\naxislegend(axN,position=:cb)\naxislegend(axD,position=:cb)\naxislegend(axP,position=:rt)\n\nrecord(fig,\n    \"single_column_carbon_alkalinity_nutrients.mp4\",\n    1:nt,\n    framerate=64\n    ) do nn\n    n[] = nn\n    new_point = Point2(\n        tt[nn] / days,\n        (CO₂_flux_time_series[nn] * 1e7),\n        )\n    CO₂_flux_points[]  = push!(\n        CO₂_flux_points[],\n        new_point,\n        )\n\n    new_point = Point2(\n        tt[nn] / days,\n        (pCO₂_ocean_time_series[nn] * 1e6),\n        )\n    pCO₂_ocean_points[]  = push!(\n        pCO₂_ocean_points[],\n        new_point,\n        )\n\n    new_point = Point2(\n        tt[nn] / days,\n        (pCO₂_atmos_time_series[nn] * 1e6),\n        )\n    pCO₂_atmos_points[]  = push!(\n        pCO₂_atmos_points[],\n        new_point,\n        )\nend\nnothing #hide\nfig","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"(Image: )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"This page was generated using Literate.jl.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"EditURL = \"../../../examples/single_column_nutrients_plankton_bacteria_detritus.jl\"","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/#Nutrients,-plankton,-bacteria,-detritus","page":"Single column nutrients, plankton, bacteria, detritus","title":"Nutrients, plankton, bacteria, detritus","text":"","category":"section"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"This example illustrates how to use ClimaOceanBiogeochemistry's NutrientsPlanktonBacteriaDetrius model in a single column context.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"using ClimaOceanBiogeochemistry: NutrientsPlanktonBacteriaDetritus\n\nusing Oceananigans\nusing Oceananigans.Units\n\nusing Printf\nusing CairoMakie","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/#A-single-column-grid","page":"Single column nutrients, plankton, bacteria, detritus","title":"A single column grid","text":"","category":"section"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"We set up a single column grid whose depth is H and with Nz points","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"H = 1000meters\nz = (-H, 0)\nNz = 100\n\ngrid = RectilinearGrid(size = Nz; z, topology = (Flat, Flat, Bounded))","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"A prescribed vertical tracer diffusivity","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"We define a tracer diffusivity that mixes a lot near the surface (in the top 50 m), and less down below.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"@inline κ(z, t) = 1e-4 + 1e-2 * exp(z / 25) + 1e-2 * exp(-(z + 1000) / 50)\nvertical_diffusion = VerticalScalarDiffusivity(; κ)","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"We put the pieces together. The important line here is biogeochemistry = NutrientsPlanktonBacteriaDetritus(grid). We use all default parameters.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"model = HydrostaticFreeSurfaceModel(; grid,\n                                    velocities = PrescribedVelocityFields(),\n                                    biogeochemistry = NutrientsPlanktonBacteriaDetritus(grid),\n                                    tracers = (:N, :P, :Z, :B, :D),\n                                    tracer_advection = WENO(),\n                                    buoyancy = nothing,\n                                    closure = vertical_diffusion)","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/#Initial-conditions","page":"Single column nutrients, plankton, bacteria, detritus","title":"Initial conditions","text":"","category":"section"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"We initialize the model with reasonable nutrients, detritus, and a nutrient mixed layer.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"set!(model, N=3, P=1e-1, Z=1e-1, B=1e-1, D=1e-1)\n\nsimulation = Simulation(model, Δt=30minutes, stop_time=10days)\n\nfunction progress(sim)\n    @printf(\"Iteration: %d, time: %s, total(N): %.2e \\n\",\n            iteration(sim), prettytime(sim),\n            sum(model.tracers.N) + sum(model.tracers.P) + sum(model.tracers.B) + sum(model.tracers.D))\n    return nothing\nend\n\nsimulation.callbacks[:progress] = Callback(progress, IterationInterval(10))","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Let's see the initial condition","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"N = model.tracers.N\nP = model.tracers.P\nZ = model.tracers.Z\nB = model.tracers.B\nD = model.tracers.D\n\nz = znodes(N)\n\nfig = Figure(size=(1200, 600))\n\naxN  = Axis(fig[1, 1], xlabel=\"Nutrient concentration (N)\", ylabel=\"z (m)\")\naxP  = Axis(fig[1, 2], xlabel=\"Phytoplankton concentration (P)\")\naxZ  = Axis(fig[1, 3], xlabel=\"Zooplankton concentration (Z)\")\naxB  = Axis(fig[1, 4], xlabel=\"Bacteria concentration (B)\")\naxD = Axis(fig[1, 5], xlabel=\"Detritus concentration (D)\")\n\nlines!(axN, interior(N, 1, 1, :), z)\nlines!(axP, interior(P, 1, 1, :), z)\nlines!(axZ, interior(Z, 1, 1, :), z)\nlines!(axB, interior(B, 1, 1, :), z)\nlines!(axD, interior(D, 1, 1, :), z)\n\ncurrent_figure()","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Now we add an output writer to the simulation and run the simulation.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"filename = \"nutrients_plankton_bacteria_detritus.jld2\"\n\nsimulation.output_writers[:fields] = JLD2OutputWriter(model, model.tracers;\n                                                      filename,\n                                                      schedule = TimeInterval(1day),\n                                                      overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/#Visualization","page":"Single column nutrients, plankton, bacteria, detritus","title":"Visualization","text":"","category":"section"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"All that's left is to visualize the results.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Pt = FieldTimeSeries(filename, \"P\")\nZt = FieldTimeSeries(filename, \"Z\")\nBt = FieldTimeSeries(filename, \"B\")\nDt = FieldTimeSeries(filename, \"D\")\nNt = FieldTimeSeries(filename, \"N\")\n\nt = Pt.times\nnt = length(t)\nz = znodes(Pt)\n\nfig = Figure(size=(1200, 600))\n\naxN  = Axis(fig[1, 1], xlabel=\"[Nutrient] (mmol m⁻³)\", ylabel=\"z (m)\")\naxP  = Axis(fig[1, 2], xlabel=\"[Phytoplankton] (mmol m⁻³)\")\naxZ  = Axis(fig[1, 3], xlabel=\"[Zooplankton] (mmol m⁻³)\")\naxB  = Axis(fig[1, 4], xlabel=\"[Bacteria] (mmol m⁻³)\")\naxD = Axis(fig[1, 5], xlabel=\"[Detritus] (mmol m⁻³)\")\n\nslider = Slider(fig[2, 1:5], range=1:nt, startvalue=1)\nn = slider.value\n\ntitle = @lift @sprintf(\"Equilibrium biogeochemistry at t = %d days\", t[$n] / day)\nLabel(fig[0, 1:5], title)\n\nNn  = @lift interior(Nt[$n], 1, 1, :)\nPn  = @lift interior(Pt[$n], 1, 1, :)\nZn  = @lift interior(Zt[$n], 1, 1, :)\nBn  = @lift interior(Bt[$n], 1, 1, :)\nDn = @lift interior(Dt[$n], 1, 1, :)\n\nlines!(axP, Pn, z)\nlines!(axZ, Zn, z)\nlines!(axD, Dn, z)\nlines!(axB, Bn, z)\nlines!(axN, Nn, z)\n\nrecord(fig, \"nutrients_plankton_bacteria_detritus.mp4\", 1:nt, framerate=24) do nn\n    n[] = nn\nend\nnothing #hide","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"(Image: )","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Let's plot a snapshot of the last frame.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Nn_last  = interior(Nt[end], 1, 1, :)\nPn_last  = interior(Pt[end], 1, 1, :)\nZn_last  = interior(Zt[end], 1, 1, :)\nBn_last  = interior(Bt[end], 1, 1, :)\nDn_last = interior(Dt[end], 1, 1, :)\n\nlast_frame = Figure(size=(1200, 600))\naxN  = Axis(last_frame[1, 1], xlabel=\"[N] (mmol m⁻³)\", ylabel=\"z (m)\")\naxP  = Axis(last_frame[1, 2], xlabel=\"[P] (mmol m⁻³)\")\naxZ  = Axis(last_frame[1, 3], xlabel=\"[Z] (mmol m⁻³)\")\naxB  = Axis(last_frame[1, 4], xlabel=\"[B] (mmol m⁻³)\")\naxD = Axis(last_frame[1, 5], xlabel=\"[D] (mmol m⁻³)\")\n\nlines!(axP, Pn_last, z)\nlines!(axZ, Zn_last, z)\nlines!(axD, Dn_last, z)\nlines!(axB, Bn_last, z)\nlines!(axN, Nn_last, z)\n\nsave(\"NPZDB.png\", last_frame)\nnothing #hide","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"(Image: )","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Another figure: we plot the sum of each variable against time.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"N_time  = zeros(1:nt)\nP_time  = zeros(1:nt)\nZ_time  = zeros(1:nt)\nB_time  = zeros(1:nt)\nD_time = zeros(1:nt)\n\nfor times = 1:nt\n    N_time[times] = sum(Nt[:, :, :, times])\n    P_time[times] = sum(Pt[:, :, :, times])\n    Z_time[times] = sum(Zt[:, :, :, times])\n    B_time[times] = sum(Bt[:, :, :, times])\n    D_time[times] = sum(Dt[:, :, :, times])\nend\n\nTimeVar = Figure()\nax2 = Axis(TimeVar[1, 1], title=\"Nutrients evolution\", ylabel=\"Variable (mmol m⁻³)\", xlabel=\"Time (days)\")\nlines!(ax2, 1:nt, N_time, label=\"N\")\nlines!(ax2, 1:nt, P_time, label=\"P\")\nlines!(ax2, 1:nt, Z_time, label=\"Z\")\nlines!(ax2, 1:nt, B_time, label=\"B\")\nlines!(ax2, 1:nt, D_time, label=\"dD\")\n\naxislegend()\n\nsave(\"TimeVariations.png\", TimeVar)\nnothing #hide","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"(Image: )","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"This page was generated using Literate.jl.","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"EditURL = \"../../../examples/soda_outgassing.jl\"","category":"page"},{"location":"literated/soda_outgassing/#Illustration-of-using-a-carbon-system-solver","page":"Soda outgassing","title":"Illustration of using a carbon system solver","text":"","category":"section"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"This example illustrates how to use ClimaOceanBiogeochemistry's UniversalRobustCarbonSystem model in a 0-d context.","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"using ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver: UniversalRobustCarbonSystem\nusing ClimaOceanBiogeochemistry.CarbonSystemSolvers: CarbonSystemParameters, CarbonSolverParameters, CarbonCoefficientParameters\n\nusing Oceananigans\nusing Oceananigans.Units\n\nusing Printf\nusing CairoMakie","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"We are going to simulate two bottles of soda, one opened and left in the fridge   the other opened and left on the counter to go flat.","category":"page"},{"location":"literated/soda_outgassing/#Model-setup","page":"Soda outgassing","title":"Model setup","text":"","category":"section"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"The 0-d grid represents a 10cm bottle of soda","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"grid = RectilinearGrid(size = 1,\n                       z = (-1meter/10, 0),\n                       topology = (Flat, Flat, Bounded))","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"For CO₂ exchange, we use a FluxBoundaryCondition for the \"top\" of the dissolved inorganic carbon (DIC) tracer. We'll write a callback later to calculate the flux every time step.","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"co₂_flux = Field{Center, Center, Nothing}(grid)\ndic_bcs  = FieldBoundaryConditions(top = FluxBoundaryCondition(co₂_flux))","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Field arrays to store pCO₂ values filled in compute_co₂_flux!","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"soda_pCO₂ = Field{Center, Center, Nothing}(grid)\natmos_pCO₂ = Field{Center, Center, Nothing}(grid)","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Build function for CO₂ flux calculation. Dissolved CO₂ in the soda will exchange with the overlying atmosphere These are some coefficients and constants that we'll use in the calculation","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Base.@kwdef struct CO₂_flux_parameters{FT}\n    surface_wind_speed   :: FT = 10. # ms⁻¹\n    atmospheric_pCO₂     :: FT = 280e-6 # atm\n    exchange_coefficient :: FT = 0.337 # cm hr⁻¹\n    salinity             :: FT = 0.0 # psu\n    alkalinity           :: FT = 2.35e-3 # mol kg⁻¹\n    silicate             :: FT = 0e-6 # mol kg⁻¹\n    phosphate            :: FT = 0e-6 # mol kg⁻¹\n    initial_pH_guess     :: FT = 8.0\n    reference_density    :: FT = 1024.5 # kg m⁻³\nend\n\n\"\"\"\n    compute_co₂_flux!(simulation)\n\nReturns the tendency due to CO₂ flux using the piston velocity\nformulation of Wanninkhof (1992) and the solubility/activity of\nCO₂ that depends on temperature, etc.\n\"\"\"\n@inline function compute_co₂_flux!(simulation; solver_params = ())\n    Nz = size(simulation.model.grid, 3)\n\n# Get coefficients from CO₂_flux_parameters struct\n# I really want the option to take these from the model\n    (; surface_wind_speed,\n       atmospheric_pCO₂,\n       exchange_coefficient,\n       salinity,\n       alkalinity,\n       silicate,\n       phosphate,\n       initial_pH_guess,\n       reference_density,\n       ) = CO₂_flux_parameters()\n\n    U₁₀      = surface_wind_speed\n    pCO₂ᵃᵗᵐ  = atmospheric_pCO₂\n    Kʷₐᵥₑ    = exchange_coefficient\n    Sᴬ       = salinity\n    Aᵀ       = alkalinity\n    Siᵀ      = silicate\n    Pᵀ       = phosphate\n    pH       = initial_pH_guess\n    ρʳᵉᶠ     = reference_density\n\n    cmhr⁻¹_per_ms⁻¹ = 1 / 3.6e5 # conversion factor from cm/hr to m/s\n\n    co₂_flux = simulation.model.tracers.DIC.boundary_conditions.top.condition\n    Θᶜ = simulation.model.tracers.T[1,1,Nz]\n    Cᵀ = simulation.model.tracers.DIC[1,1,Nz]/ρʳᵉᶠ\n\n    # applied pressure in atm (i.e. Pˢᵘʳᶠ-Pᵃᵗᵐ)\n    # Positive when the can is sealed, then zero when the can is opens\n    # On average, the 12 ounce soda cans sold in the US tend to have a pressure of roughly 120 kPa when canned at 4 °C\n    if iteration(simulation) <= 1\n        Δpᵦₐᵣ   = 0.2\n    else\n        # *pssshhhht* the bottle is opened\n        Δpᵦₐᵣ   = 0.0\n    end\n\n    # compute soda pCO₂ using the UniversalRobustCarbonSystem solver\n    # Returns soda pCO₂ (in atm) and atmosphere/soda solubility coefficients (mol kg⁻¹ atm⁻¹)\n    (; pCO₂ᵒᶜᵉ, Pᵈⁱᶜₖₛₒₗₐ, Pᵈⁱᶜₖₛₒₗₒ) = UniversalRobustCarbonSystem(\n        pH      = pH,\n        pCO₂ᵃᵗᵐ = pCO₂ᵃᵗᵐ,\n        Θᶜ      = Θᶜ,\n        Sᴬ      = Sᴬ,\n        Δpᵦₐᵣ   = Δpᵦₐᵣ,\n        Cᵀ      = Cᵀ,\n        Aᵀ      = Aᵀ,\n        Pᵀ      = Pᵀ,\n        Siᵀ     = Siᵀ,\n        solver_params...,\n    )\n\n    # store the soda and atmospheric CO₂ concentrations into Fields\n    soda_pCO₂[1,1,Nz]  = (pCO₂ᵒᶜᵉ * Pᵈⁱᶜₖₛₒₗₒ ) * ρʳᵉᶠ # Convert mol kg⁻¹ m s⁻¹ to mol m⁻² s⁻¹\n    atmos_pCO₂[1,1,Nz] = (pCO₂ᵃᵗᵐ * Pᵈⁱᶜₖₛₒₗₐ) * ρʳᵉᶠ # Convert mol kg⁻¹ to mol m⁻³\n\n    # compute schmidt number for DIC\n    kˢᶜ = CarbonCoefficientParameters(\n            a₀ = 2116.8,\n            a₁ = 136.25,\n            a₂ = 4.7353,\n            a₃ = 9.2307e-2,\n            a₄ = 7.555e-4,\n            a₅ = 660.0,\n        )\n\n    Cˢᶜᵈⁱᶜ =  ( kˢᶜ.a₀ -\n                kˢᶜ.a₁ * Θᶜ +\n                kˢᶜ.a₂ * Θᶜ^2 -\n                kˢᶜ.a₃ * Θᶜ^3 +\n                kˢᶜ.a₄ * Θᶜ^4\n              )/kˢᶜ.a₅\n\n    # compute gas exchange coefficient/piston velocity and correct with Schmidt number\n    Kʷ =  (\n           (Kʷₐᵥₑ * cmhr⁻¹_per_ms⁻¹) * U₁₀^2\n          ) / sqrt(Cˢᶜᵈⁱᶜ)\n\n    # compute co₂ flux (-ve for uptake, +ve for outgassing since convention is +ve upwards in the soda)\n    co₂_flux[1,1,Nz] = - Kʷ * (\n                    pCO₂ᵃᵗᵐ * Pᵈⁱᶜₖₛₒₗₐ -\n                    pCO₂ᵒᶜᵉ * Pᵈⁱᶜₖₛₒₗₒ\n                   ) * ρʳᵉᶠ # Convert mol kg⁻¹ m s⁻¹ to mol m⁻² s⁻¹\n    return nothing\nend","category":"page"},{"location":"literated/soda_outgassing/#Simulation-of-a-soda-outgassing-CO-in-the-fridge","page":"Soda outgassing","title":"Simulation of a soda outgassing CO₂ in the fridge","text":"","category":"section"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"model_open_in_the_fridge = NonhydrostaticModel(;\n    grid,\n    velocities = nothing,\n    buoyancy   = nothing,\n    closure    = nothing,\n    tracers    = (:T, :DIC),\n    boundary_conditions = (; DIC=dic_bcs),\n    )","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Initial conditions for the refridgerated soda","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Tᵢ   = 4     # °C\nDICᵢ = 2.4   # mol/m³\nset!(model_open_in_the_fridge, T = Tᵢ, DIC = DICᵢ)\n\nsimulation = Simulation(model_open_in_the_fridge, Δt=10minutes, stop_time=24hours)","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Add an output writer...","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"fnm_fridge = \"soda_in_the_fridge.jld2\"\noutputs = (; co₂_flux,\n             soda_pCO₂,\n             atmos_pCO₂,\n             model_open_in_the_fridge.tracers.T,\n             model_open_in_the_fridge.tracers.DIC,\n             )\nsimulation.output_writers[:jld2] = JLD2OutputWriter(\n    model_open_in_the_fridge, outputs;\n    filename = fnm_fridge,\n    schedule = TimeInterval(10minutes),\n    overwrite_existing = true,\n    )","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"... and don't forget to add a callback to compute the CO₂ flux","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"add_callback!(simulation, compute_co₂_flux!)","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Run the simulation","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"run!(simulation)","category":"page"},{"location":"literated/soda_outgassing/#A-simulation-of-a-soda-outgassing-CO-on-the-counter","page":"Soda outgassing","title":"A simulation of a soda outgassing CO₂ on the counter","text":"","category":"section"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"We simulate soda Warming up on the counter using a forcing function linear increase from 4°C to 30°C over 12 hours then stops warming","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"temperature_increase(z, t, p) = ifelse(t <= 12hours, p.∂T∂t * p.Δt , 0.0)\n\nwarming = Forcing(\n     temperature_increase,\n     parameters=(∂T∂t=1e-6, Δt=10minutes),\n     )","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Build the second model for the soda on the counter","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"model_open_on_the_counter = NonhydrostaticModel(;\n    grid,\n    velocities = nothing,\n    buoyancy   = nothing,\n    closure    = nothing,\n    forcing    = (; T=warming),\n    tracers    = (:T, :DIC),\n    boundary_conditions = (; DIC=dic_bcs),\n    )\n\nset!(model_open_on_the_counter, T = Tᵢ, DIC = DICᵢ)\n\nsimulation = Simulation(model_open_on_the_counter, Δt=10minutes, stop_time=24hours)","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Add an output writer...","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"fnm_counter = \"soda_on_the_counter.jld2\"\noutputs  = (; co₂_flux,\n              soda_pCO₂,\n              atmos_pCO₂,\n              model_open_on_the_counter.tracers.T,\n              model_open_on_the_counter.tracers.DIC,\n              )\nsimulation.output_writers[:jld2] = JLD2OutputWriter(\n    model_open_on_the_counter, outputs;\n    filename = fnm_counter,\n    schedule = TimeInterval(10minutes),\n    overwrite_existing = true)","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"..and don't forget to add a callback to compute the CO₂ flux","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"add_callback!(simulation, compute_co₂_flux!)","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"Run the simulation","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"run!(simulation)","category":"page"},{"location":"literated/soda_outgassing/#Visualization","page":"Soda outgassing","title":"Visualization","text":"","category":"section"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"All that's left is to visualize the results.","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"fridge_soda_pCO₂ = FieldTimeSeries(fnm_fridge, \"soda_pCO₂\")\nfridge_atmo_co₂ = FieldTimeSeries(fnm_fridge, \"atmos_pCO₂\")\nfridge_temp      = FieldTimeSeries(fnm_fridge, \"T\")\n\ncounter_soda_pCO₂ = FieldTimeSeries(fnm_counter, \"soda_pCO₂\")\ncounter_atmo_co₂ = FieldTimeSeries(fnm_counter, \"atmos_pCO₂\")\ncounter_temp      = FieldTimeSeries(fnm_counter, \"T\")\n\nt  = fridge_soda_pCO₂.times\nnt = length(t)\n\nfig = Figure(size=(1200, 900))\n\nax = Axis(fig[1,1], xlabel=\"Time\", ylabel=\"CO₂ conc [mmol m⁻³]\")\nlines!(t/(3600),\n       interior(fridge_soda_pCO₂, 1, 1, 1, :)*1e3;\n       linestyle = :dash,\n       label = \"fridge soda\",\n       )\nlines!(t/(3600),\n       interior(counter_soda_pCO₂, 1, 1, 1, :)*1e3;\n       linestyle = :solid,\n       label = \"counter soda\",\n       )\nlines!(t/(3600),\n       interior(fridge_atmo_co₂, 1, 1, 1, :)*1e3;\n       linestyle = :dash,\n       label = \"fridge saturated\")\nlines!(t/(3600),\n       interior(counter_atmo_co₂, 1, 1, 1, :)*1e3;\n       linestyle = :solid,\n       label = \"counter saturated\")\naxislegend()\n\nax = Axis(fig[2,1], xlabel=\"Time\", ylabel=\"Temp (°C)\")\nlines!(t/(3600),\n       interior(fridge_temp, 1, 1, 1, :),\n       linestyle = :dash,\n       label = \"fridge soda temperature\",\n       )\nlines!(t/(3600),\n       interior(counter_temp, 1, 1, 1, :),\n       linestyle = :solid,\n       label = \"counter soda temperature\",\n       )\naxislegend()","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"The cool soda's CO₂ concentration approaches equilibrium with the atmosphere (the saturated CO₂ concentration) quickly. The warming soda continues to outgas, since the solubility of CO₂ decreases with temperature. It'll taste flatter because of the lower CO₂ concentration.","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"#save(\"soda_outgassing_0d.png\", fig)\nnothing #hide\nfig","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"(Image: )","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"","category":"page"},{"location":"literated/soda_outgassing/","page":"Soda outgassing","title":"Soda outgassing","text":"This page was generated using Literate.jl.","category":"page"},{"location":"library/function_index/#main-index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"library/function_index/","page":"Function index","title":"Function index","text":"Pages = [\"public.md\", \"internals.md\", \"function_index.md\"]","category":"page"},{"location":"library/outline/#Library-Outline","page":"Contents","title":"Library Outline","text":"","category":"section"},{"location":"library/outline/","page":"Contents","title":"Contents","text":"Pages = [\"public.md\", \"internals.md\", \"function_index.md\"]","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"EditURL = \"../../../examples/simple_plankton_growth_death.jl\"","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"using Oceananigans\nusing Oceananigans.Units\nusing Oceananigans\nusing Oceananigans.Grids: znode\nusing Oceananigans.Biogeochemistry: AbstractBiogeochemistry\nusing Oceananigans.TurbulenceClosures: CATKEVerticalDiffusivity\n\nusing Printf\n\nimport Oceananigans.Biogeochemistry: required_biogeochemical_tracers\n\n\"\"\"\n    SimplePlanktonGrowthDeath(; growth_rate = 1/day\n                                shortwave_attenuation_scale = 20.0\n                                mortality_rate = 0.1/day)\n\nReturn a single-tracer biogeochemistry model for growing and dying plankton.\n\"\"\"\nBase.@kwdef struct SimplePlanktonGrowthDeath{FT} <: AbstractBiogeochemistry\n    growth_rate :: FT = 1/day\n    shortwave_attenuation_scale :: FT = 20.0\n    mortality_rate :: FT = 0.1/day\nend\n\n@inline required_biogeochemical_tracers(::SimplePlanktonGrowthDeath) = tuple(:P)\n\nconst c = Center()\n\n@inline function (bgc::SimplePlanktonGrowthDeath)(i, j, k, grid, ::Val{:P}, clock, fields)\n   μ₀ = bgc.growth_rate\n   λ = bgc.shortwave_attenuation_scale\n   m = bgc.mortality_rate\n   P = @inbounds fields.P[i, j, k]\n   z = znode(i, j, k, grid, c, c, c)\n   return (μ₀ * exp(z / λ) - m) * P\nend","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"We set up the model","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"grid = RectilinearGrid(size = 64,\n                       z = (-256meters, 0),\n                       topology = (Flat, Flat, Bounded))\n\nQᵇ(t) = ifelse(t < 4days, 1e-7, 0.0)\nb_bcs = FieldBoundaryConditions(top = FluxBoundaryCondition(Qᵇ))\n\nmodel = HydrostaticFreeSurfaceModel(; grid,\n                                    biogeochemistry = SimplePlanktonGrowthDeath(),\n                                    closure = CATKEVerticalDiffusivity(),\n                                    tracers = (:b, :e),\n                                    buoyancy = BuoyancyTracer(),\n                                    boundary_conditions = (; b=b_bcs))\n\nN² = 1e-5 # s⁻²\nbᵢ(z) = N² * z\nset!(model, b=bᵢ, P=1e-2, e=1e-6)\n\nsimulation = Simulation(model, Δt=10minutes, stop_time=8days)\n\nprogress(sim) = @printf(\"Iteration: %d, time: %s, max(P): %.2e \\n\",\n                        iteration(sim), prettytime(sim), maximum(model.tracers.P))\n\nsimulation.callbacks[:progress] = Callback(progress, IterationInterval(10))\n\noutputs = merge(model.velocities, model.tracers)\nfilename = \"simple_plankton_growth_death.jld2\"\n\nsimulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;\n                                                      filename,\n                                                      schedule = TimeInterval(20minutes),\n                                                      overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"Now we load the saved output and plot","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"using CairoMakie\n\nbt = FieldTimeSeries(filename, \"b\")\net = FieldTimeSeries(filename, \"e\")\nPt = FieldTimeSeries(filename, \"P\")\n\nt = bt.times\nNt = length(t)\nz = znodes(bt)\n\nfig = Figure(size=(800, 400))\n\naxb = Axis(fig[1, 1], ylabel=\"z (m)\", xlabel=\"Buoyancy (m² s⁻³)\")\naxe = Axis(fig[1, 2], ylabel=\"z (m)\", xlabel=\"Turbulent kinetic energy (m² s²)\")\naxP = Axis(fig[1, 3], ylabel=\"z (m)\", xlabel=\"Plankton concentration\")\n\nxlims!(axe, -1e-5, 1e-3)\nxlims!(axP, 0, 0.1)\n\nn = Observable(1)\n\ntitle = @lift @sprintf(\"Convecting plankton at t = %d days\", t[$n] / day)\nLabel(fig[0, 1:3], title)\n\nbn = @lift interior(bt[$n], 1, 1, :)\nen = @lift interior(et[$n], 1, 1, :)\nPn = @lift interior(Pt[$n], 1, 1, :)\n\nlines!(axb, bn, z)\nlines!(axe, en, z)\nlines!(axP, Pn, z)\n\nfig\n\nrecord(fig, \"simple_plankton_growth_death.mp4\", 1:Nt, framerate=24) do nn\n    n[] = nn\nend","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"(Image: )","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"This page was generated using Literate.jl.","category":"page"},{"location":"library/internals/#Private-types-and-functions","page":"Private","title":"Private types and functions","text":"","category":"section"},{"location":"library/internals/","page":"Private","title":"Private","text":"Documentation for ClimaOceanBiogeochemistry.jl's internal interface.","category":"page"},{"location":"library/internals/#ClimaOceanBiogeochemistry","page":"Private","title":"ClimaOceanBiogeochemistry","text":"","category":"section"},{"location":"library/internals/","page":"Private","title":"Private","text":"Modules = [ClimaOceanBiogeochemistry, \n           ClimaOceanBiogeochemistry.CarbonSystemSolvers,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver]\nPublic  = false","category":"page"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:ALK}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for alkalinity (ALK)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:DIC}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for dissolved inorganic carbon (DIC)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:DOP}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for dissolved organic phosphorus (DOP)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:Fe}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for dissolved iron (FeT)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:NO₃}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for dissolved inorganic nitrate (NO₃)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:POP}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for Particulate Organic Phosphorus (POP).\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:PO₄}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for dissolved inorganic phosphate (PO₄)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonAlkalinityNutrients-Tuple{}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonAlkalinityNutrients","text":"CarbonAlkalinityNutrients(  reference_density                             = 1024.5,\n                            maximum_net_community_production_rate         = 1 / day,\n                            phosphate_half_saturation                     = 1e-7 * reference_density,\n                            nitrate_half_saturation                       = 1.6e-6 * reference_density,\n                            iron_half_saturation                          = 1e-10 * reference_density,\n                            incident_PAR                                  = 700.0,\n                            PAR_half_saturation                           = 10.0,\n                            PAR_attenuation_scale                         = 25.0,\n                            PAR_percent                                   = 0.01,\n                            fraction_of_particulate_export                = 0.33,\n                            dissolved_organic_phosphorus_remin_timescale  = 1 / 30day,\n                            option_of_particulate_remin                   = 1,\n                            particulate_organic_phosphorus_remin_timescale= 0.03 / day, \n                            stoichoimetric_ratio_carbon_to_phosphate      = 106.0\n                            stoichoimetric_ratio_nitrate_to_phosphate     = 16.0\n                            stoichoimetric_ratio_phosphate_to_oxygen      = 170.0,\n                            stoichoimetric_ratio_iron_to_phosphate        = 4.68e-4\n                            stoichoimetric_ratio_carbon_to_nitrate        = 106 / 16\n                            stoichoimetric_ratio_carbon_to_oxygen         = 106 / 170,\n                            stoichoimetric_ratio_carbon_to_iron           = 106 / 1.e-3,\n                            stoichoimetric_ratio_silicate_to_phosphate    = 15.0,\n                            rain_ratio_inorganic_to_organic_carbon        = 1e-1,\n                            martin_curve_exponent                         = 0.84, \n                            iron_scavenging_rate                          = 5e-4 / day,\n                            ligand_concentration                          = 1e-9 * reference_density,\n                            ligand_stability_coefficient                  = 1e8\n                            particulate_organic_phosphorus_sinking_velocity    = -10.0 / day)\n\nReturn a seven-tracer biogeochemistry model for the interaction of carbon, alkalinity, and nutrients.\n\nKeyword Arguments\n\nTracer names\n\nDIC: Dissolved Inorganic Carbon\nALK: Alkalinity\nPO₄: Phosphate (macronutrient)\nNO₃: Nitrate (macronutrient)\nDOP: Dissolved Organic Phosphorus\nPOP: Particulate Organic Phosphorus\nFe: Dissolved Iron (micronutrient)\n\nBiogeochemical functions\n\ntransitions for DIC, ALK, PO₄, NO₃, DOP, POP and Fe\nbiogeochemical_drift_velocity for POP, modeling the sinking of detritus at a constant detritus_sinking_speed.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.NutrientsPlanktonBacteriaDetritus-Tuple{Any}","page":"Private","title":"ClimaOceanBiogeochemistry.NutrientsPlanktonBacteriaDetritus","text":"NutrientsPlanktonBacteriaDetritus(; grid,\n                                    maximum_plankton_growth_rate = 1/day,\n                                    maximum_bacteria_growth_rate = 1/day\n                                    maximum_grazing_rate         = 3/day\n                                    bacteria_yield               = 0.2\n                                    zooplankton_yield            = 0.3\n                                    linear_remineralization_rate = 0.03/day,\n                                    linear_mortality_rate        = 0.01/day,\n                                    quadratic_mortality_rate     = 0.1/day,\n                                    quadratic_mortality_rate_Z   = 1/day,\n                                    nutrient_half_saturation     = 0.1,\n                                    detritus_half_saturation     = 0.1,\n                                    grazing_half_saturation      = 3.0,\n                                    PAR_half_saturation          = 10.0,\n                                    PAR_attenuation_scale        = 25.0,\n                                    detritus_vertical_velocity   = -10/day)\n\nReturn a six-tracer biogeochemistry model for the interaction of nutrients (N), phytoplankton (P),  zooplankton(Z), bacteria (B), dissolved detritus (D1), and particulate detritus (D2).\n\nKeyword Arguments\n\ngrid (required): An Oceananigans' grid.\nmaximum_plankton_growth_rate: (s⁻¹) Growth rate of plankton P unlimited by the                                   availability of nutrients and light. Default: 1/day.\nmaximum_bacteria_growth_rate: (s⁻¹) Growth rate of plankton B unlimited by the                                 availability of nutrients and light. Default = 0.5/day.\nmaximum_grazing_rate: (s⁻¹) Maximum grazing rate of phytoplankton by zooplankton.\nbacteria_yield: Determines fractional nutrient production by bacteria production                    relative to consumption of detritus such that _t N  _t D = 1 - y,                   where y = bacteria_yield. Default: 0.2.\nlinear_remineralization_rate: (s⁻¹) Remineralization rate constant of detritus 'D',                                  assuming linear remineralization of 'D', while                                  implicitly modeling bacteria 'B'. Default = 0.3/day.\nlinear_mortality_rate: (s⁻¹) Linear term of the mortality rate of both plankton and bacteria.\nquadratic_mortality_rate: (s⁻¹) Quadratic term of the mortality rate of both plankton and bacteria.\nnutrient_half_saturation: (mmol m⁻³) Half-saturation of nutrients for plankton production.\ndetritus_half_saturation: (mmol m⁻³) Half-saturation of nutrients for bacteria production.                             Default = 10.0 mmol m⁻³.\nphytoplankton_half_saturation: (mmol m⁻³) Half-saturation of phytoplankton for zooplankton production.\nzooplankton_assimilation: Fractional assimilation efficiency for zooplankton.\nPAR_half_saturation: (W m⁻²) Half-saturation of photosynthetically available radiation (PAR)                        for plankton production.\nPAR_attenuation_scale: (m) Depth scale over which photosynthetically available radiation (PAR)                           attenuates exponentially.\ndetritus_sinking_speed: (m s⁻¹) Sinking velocity of particulate detritus.\n\nTracer names\n\nN: nutrients\nP: phytoplankton\nZ: zooplankton\nB: bacteria\nD: detritus\n\nBiogeochemical functions\n\ntransitions for N, P, Z, B, D\nbiogeochemical_drift_velocity for D2, modeling the sinking of detritus at a constant detritus_sinking_speed.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.PAR-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.PAR","text":"PAR(surface_photosynthetically_active_ratiation, \n    photosynthetically_active_ratiation_attenuation_scale, \n    depth)\n\nCalculate the photosynthetically active radiation (PAR) at a given depth due to attenuation.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.dissolved_organic_phosphorus_remin-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.dissolved_organic_phosphorus_remin","text":"dissolved_organic_phosphorus_remin(remineralization_rate, \n                                  dissolved_organic_phosphorus_concentration)\n\nCalculate the remineralization of dissolved organic phosphorus.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.iron_scavenging-NTuple{4, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.iron_scavenging","text":"iron_scavenging(iron_scavenging_rate, \n                iron_concentration, \n                ligand_concentration, \n                ligand_stability_coefficient)\n\nCalculate the scavenging loss of iron. Iron scavenging depends on free iron, which  involves solving a quadratic equation in terms of ligand concentration and stability  coefficient. Ligand-complexed iron is protected from being scavenged.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.iron_sources-Tuple{}","page":"Private","title":"ClimaOceanBiogeochemistry.iron_sources","text":"Add surface input of iron. This sould be a boundary condition, but for now we just add a constant source.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.net_community_production-NTuple{9, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.net_community_production","text":"net_community_production(maximum_net_community_production_rate,\n                         light_half_saturation, \n                         phosphate_half_saturation, \n                         nitrate_half_saturation, \n                         iron_half_saturation, \n                         photosynthetically_active_radiation, \n                         phosphate_concentration, \n                         nitrate_concentration, \n                         iron_concentration)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.particulate_inorganic_carbon_remin-Tuple{}","page":"Private","title":"ClimaOceanBiogeochemistry.particulate_inorganic_carbon_remin","text":"Calculate remineralization of particulate inorganic carbon.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.particulate_organic_phosphorus_remin-NTuple{8, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.particulate_organic_phosphorus_remin","text":"Calculate remineralization of particulate organic phosphorus according to      1) rate decreases with depth (1/z+z₀),  or  2) a first-order rate constant.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Oceananigans.Biogeochemistry.biogeochemical_drift_velocity-Tuple{ClimaOceanBiogeochemistry.CarbonAlkalinityNutrients, Val{:POP}}","page":"Private","title":"Oceananigans.Biogeochemistry.biogeochemical_drift_velocity","text":"Add a vertical sinking \"drift velocity\" for the particulate organic phosphate (POP) tracer.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Bᵀᴼᵀ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Bᵀᴼᵀ","text":"Bᵀᴼᵀ(Sᵖ, Pᴮᵀᴼᵀ)\n\nReturn total borate concentration in mol/kg-SW given practical salinity, Sᵖ. References: Uppström (1974), cited by  Dickson et al. (2007, chapter 5, p 10)             Millero (1982) cited in Millero (1995)\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Caᵀᴼᵀ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Caᵀᴼᵀ","text":"Caᵀᴼᵀ(Sᵖ, Pᶜᵃᵀᴼᵀ)\n\nReturn calcium concentration in mol/kg-SW given practical salinity, Sᵖ. References: Culkin and Cox (1966),              Culkin (1967),              Riley and Tongudai (1967)    \n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀCO₂ˢᵒˡ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀCO₂ˢᵒˡ","text":"FCᵀCO₂ˢᵒˡ(Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the dissolved and hydrated CO₂ concentration in seawater given the total carbon concentration Cᵀ, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀCO₃²⁻-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀCO₃²⁻","text":"FCᵀCO₃²⁻(Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the carbonate concentration in seawater given the total carbon concentration Cᵀ, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀHCO₃⁻-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀHCO₃⁻","text":"FCᵀHCO₃⁻(Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the bicarbonate ion concentration in seawater given the total carbon concentration Cᵀ, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂CO₂ˢᵒˡ-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂CO₂ˢᵒˡ","text":"FpCO₂CO₂ˢᵒˡ(pCO₂, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the dissolved and hydrated CO₂ concentration in seawater given the pCO₂, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂CO₃²⁻-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂CO₃²⁻","text":"FpCO₂CO₃²⁻(pCO₂, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the carbonate concentration in seawater given the pCO₂, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂HCO₃⁻-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂HCO₃⁻","text":"FpCO₂HCO₃⁻(pCO₂, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the bicarbonate ion concentration in seawater given the pCO₂, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fˢⁱᵗₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fˢⁱᵗₖ₁","text":"Fˢⁱᵗₖ₁(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pˢⁱᵗₖ₁)\n\nReturn the first dissociation constant of silicic acid (H4SiO4) in seawater, given  temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pˢⁱᵗₖ₁.\n\nReferences: Yao and Millero (1995) cited by Millero (1995) pH scale  : SWS (according to Dickson et al, 2007) Note      : No pressure correction available Note      : converted here from mol/kg-H2O to mol/kg-sw\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴ²ˢₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴ²ˢₖ₁","text":"Fᴴ²ˢₖ₁(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴴ²ˢₖ₁)\n\nReturn the dissociation constant of hydrogen sulfide in sea-water, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴ²ˢₖ₁.\n\nReferences: Millero et al. (1988) (cited by Millero (1995)             Millero (1995) for pressure correction pH scale  : - SWS (according to Yao and Millero, 1995, p. 82: \"refitted if necessary\")             - Total (according to Lewis and Wallace, 1998) Note      : we stick to SWS here for the time being Note      : the fits from Millero (1995) and Yao and Millero (1995)             derive from Millero et al. (1988), with all the coefficients             multiplied by -ln(10)\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴ²ᴼₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴ²ᴼₖ₁","text":"Fᴴ²ᴼₖ₁(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴴ²ᴼₖ₁)\n\nReturn dissociation constant of water in (mol/kg-SW)^2, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴ²ᴼₖ₁.\n\nReferences: Millero (1995) for value at p_bar = 0             Millero (pers. comm. 1996) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴˢᴼ⁴ₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴˢᴼ⁴ₖ₁","text":"Fᴴˢᴼ⁴ₖ₁(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴴˢᴼ⁴ₖ₁)\n\nReturn the dissociation constant of hydrogen sulfate (bisulfate) , given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴˢᴼ⁴ₖ₁.\n\nReferences: Dickson (1990) – also Handbook (2007)             Millero (1995) for pressure correction pH scale  : free Note      : converted here from mol/kg-H2O to mol/kg-SW\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴᶠᵦ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴᶠᵦ₁","text":"Fᴴᶠᵦ₁(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴴᶠᵦ₁)\n\nReturn the association constant of HF in (mol/kg-SW)^-1, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴᶠᵦ₁.\n\nHF <-> H⁺ + F⁻ \n\nReferences: Dickson and Riley (1979)             Millero (1995) for pressure correction pH scale  : free Note      : converted here from mol/kg-H2O to mol/kg-SW\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴᶠₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴᶠₖ₁","text":"Fᴴᶠₖ₁(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴴᶠₖ₁)\n\nReturn the dissociation constant for hydrogen fluoride in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴᶠₖ₁.\n\nHF <-> H⁺ + F⁻ \n\nReferences: Perez and Fraga (1987)             Millero (1995) for pressure correction pH scale  : Total (according to Handbook, 2007\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴺᴴ⁴ₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴺᴴ⁴ₖ₁","text":"Fᴺᴴ⁴ₖ₁(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴺᴴ⁴ₖ₁)\n\nReturn the dissociation constant of ammonium in sea-water [mol/kg-SW], given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴺᴴ⁴ₖ₁.\n\nReferences: Yao and Millero (1995)             Millero (1995) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₁","text":"Fᴾᴼ⁴ₖ₁(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴾᴼ⁴ₖ₁)\n\nReturn the first dissociation constant of phosphoric acid (H3PO4) in seawater, given  temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴾᴼ⁴ₖ₁.\n\nReferences: Yao and Millero (1995)             Millero (1995) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₂","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₂","text":"Fᴾᴼ⁴ₖ₂(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴾᴼ⁴ₖ₂)\n\nReturn the second dissociation constant of phosphoric acid (H3PO4) in seawater, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴾᴼ⁴ₖ₂.\n\nReferences: Yao and Millero (1995)             Millero (1995) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₃","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₃","text":"Fᴾᴼ⁴ₖ₃(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴾᴼ⁴ₖ₃)\n\nReturn the third dissociation constant of phosphoric acid (H3PO4) in seawater, given  temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴾᴼ⁴ₖ₃.\n\nReferences: Yao and Millero (1995)             Millero (1995) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵀᴼᵀ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵀᴼᵀ","text":"Fᵀᴼᵀ(Sᵖ, Pᶠᵀᴼᵀ)\n\nReturn total fluoride concentration in mol/kg-SW given practical salinity, Sᵖ. References: Culkin (1965) (???)\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ","text":"Fᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ)\n\nReturn stoichiometric solubility product, Ω, of aragonite in seawater, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ.\n\nReferences: Mucci (1983)             Millero (1979) for pressure correction pH scale  : N/A Units     : (mol/kg-SW)^2\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵇₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵇₖ₁","text":"Fᵇₖ₁(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᴮₖ₁)\n\nReturn boric acid dissociation constant in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴮₖ₁.\n\nReferences: Dickson (1990, eq. 23) – also Handbook (2007, eq. 37)             Millero (1979) pressure correction pH scale  : total\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₀","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₀","text":"Fᵈⁱᶜₖ₀(Θᴷ, Sᵖ, Pᵈⁱᶜₖ₀)\n\nReturn hydration constant of CO₂ in (mol/kg-SW)/atm given temperature  in K, Θᴷ, practical salinity, Sᵖ, and coefficients, Pᵈⁱᶜₖ₀.\n\nCO₂ + H₂O <-> H₂CO₃\n\nReferences: Weiss (1979) pH scale  : N/A Note      : currently no pressure correction\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ᵣ₉₃","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ᵣ₉₃","text":"Fᵈⁱᶜₖ₁ᵣ₉₃(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᵈⁱᶜₖ₁ᵣ₉₃)\n\nReturn the first dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure,  Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₁ᵣ₉₃.\n\nH₂CO₃ <-> HCO₃⁻ + H⁺\n\nReferences: Roy et al. (1993) – also Handbook (1994)             Millero (1979) pressure correction pH scale  : Total Valid range: T:  0-45  S:  5-45. Note      : converted here from mol/kg-H2O to mol/kg-SW\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ₗ₀₀","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ₗ₀₀","text":"Fᵈⁱᶜₖ₁ₗ₀₀(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᵈⁱᶜₖ₁ₗ₀₀)\n\nReturn the first dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure,  Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₁ₗ₀₀.\n\nH₂CO₃ <-> HCO₃⁻ + H⁺\n\nReferences: Luecker et al. (2000) – also Handbook (2007)             Millero (1979) pressure correction pH scale:   Total\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ₘ₉₅","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ₘ₉₅","text":"Fᵈⁱᶜₖ₁ₘ₉₅(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᵈⁱᶜₖ₁ₘ₉₅)\n\nReturn the first dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure,  Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₁ₘ₉₅.\n\nH₂CO₃ <-> HCO₃⁻ + H⁺\n\nReferences: Millero (1995, eq 50 – ln K1(COM))              Millero (1982) pressure correction pH scale:   SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ᵣ₉₃","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ᵣ₉₃","text":"Fᵈⁱᶜₖ₂ᵣ₉₃(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᵈⁱᶜₖ₂ᵣ₉₃)\n\nReturn the second dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₂ᵣ₉₃.\n\nHCO₃⁻ <-> CO₃²⁻ + H⁺\n\nReferences: Roy et al. (1993) – also Handbook (1994)             Millero (1979) pressure correction pH scale  : Total Valid range: T:  0-45  S:  5-45. Note      : converted here from mol/kg-H2O to mol/kg-SW\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ₗ₀₀","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ₗ₀₀","text":"Fᵈⁱᶜₖ₂ₗ₀₀(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᵈⁱᶜₖ₂ₗ₀₀)\n\nReturn the second dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₂ₗ₀₀.\n\nHCO₃⁻ <-> CO₃²⁻ + H⁺\n\nReferences: Luecker et al. (2000) – also Handbook (2007)             Millero (1979) pressure correction pH scale:   Total\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ₘ₉₅","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ₘ₉₅","text":"Fᵈⁱᶜₖ₂ₘ₉₅(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᵈⁱᶜₖ₂ₘ₉₅)\n\nReturn the second dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₂ₘ₉₅.\n\nHCO₃⁻ <-> CO₃²⁻ + H⁺\n\nReferences: Millero (1995, eq 51 – ln K2(COM))             Millero (1979) pressure correction pH scale:   SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖₚᵣₑ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖₚᵣₑ","text":"Fᵈⁱᶜₖₚᵣₑ(Θᴷ, Sᵖ, Pᵈⁱᶜₖₚᵣₑ)\n\nReturn fugacity prefactor needed for non-ideality of CO₂ in the  ocean      in (mol/kg-SW)/atm given temperature in K, Θᴷ, practical salinity,      Sᵖ, and coefficients, Pᵈⁱᶜₖₚᵣₑ.\n\nReferences: Weiss (1974) Marine Chemistry pH scale  : N/A Note      : currently no pressure correction\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖₛₒₗₐ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖₛₒₗₐ","text":"Fᵈⁱᶜₖₛₒₗₐ(Θᴷ, Sᵖ, Pᵈⁱᶜₖₛₒₗₐ)\n\nCalculate f = k0(1-pH2O)*correction term for non-ideality in (mol/kg-SW)/atm given temperature \nin K, `Θᴷ`, practical salinity, `Sᵖ`, and coefficients, `Pᵈⁱᶜₖₛₒₗₐ`. Currently no pressure correction\n\nReferences: Weiss & Price (1980, Mar. Chem., 8, 347-359 Eq 13 with table 6 values)\npH scale  : N/A\nNote      : currently no pressure correction\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᶜᵃˡᶜⁱᵗᵉₛₚ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᶜᵃˡᶜⁱᵗᵉₛₚ","text":"Fᶜᵃˡᶜⁱᵗᵉₛₚ(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real, Pᶜᵃˡᶜⁱᵗᵉₛₚ)\n\nReturn the stoichiometric solubility product of calcite, Ω, in seawater, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᶜᵃˡᶜⁱᵗᵉₛₚ\n\nReferences: Mucci (1983)             Millero (1995) for pressure correction pH scale  : N/A Units     : (mol/kg-SW)^2\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₛoverH⁺₃","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₛoverH⁺₃","text":"H⁺ₛoverH⁺₃(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real)\n\nReturn the ratio HSWS/Hfree as a function of salinity, Sᵖ.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₛoverH⁺ₜ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₛoverH⁺ₜ","text":"H⁺ₛoverH⁺ₜ(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real)\n\nReturn the ratio HSWS/HTot as a function of salinity, Sᵖ. Reference:  Munhoven pH scale:   all\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₜoverH⁺₃","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₜoverH⁺₃","text":"H⁺ₜoverH⁺₃(Θᴷ::Real, Sᵖ::Real, Δpᵦₐᵣ::Real)\n\nReturn the ratio HTot/Hfree as a function of salinity, Sᵖ. Reference:  Munhoven pH scale:   N/A\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.H₂Oˢʷ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.H₂Oˢʷ","text":"H₂Oˢʷ(Sᵖ, Pᴴ²⁰ˢʷ)\n\nReturn the mass of pure water in one kg of seawater of practical salinity, Sᵖ. References: \"libthdyct\" – derived by Munhoven (1997) from data by Millero (1982)             \"Handbook (2007)\" – Handbook (2007) pH scale:   N/A\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.SO₄ᵀᴼᵀ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.SO₄ᵀᴼᵀ","text":"SO₄ᵀᴼᵀ(Sᵖ, Pˢᴼ⁴ᵀᴼᵀ)\n\nReturn total sulfate concentration in mol/kg-SW given practical salinity, Sᵖ. References: Morris, A.W. and Riley, J.P. (1966) quoted in Handbook (2007)\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.μₛ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.μₛ","text":"μₛ(Sᵖ)\n\nReturn ionic strength in mol/kg-SW, for given practical salinity, Sᵖ. References: \"libthdyct\" – derived by Munhoven (1997) from data by Millero (1982)             \"Handbook (2007)\" – Handbook (2007) pH scale:   N/A\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FABᵀ-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FABᵀ","text":"function FABᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FACᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FACᵀ","text":"function FACᵀ(Cᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAFᵀ-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAFᵀ","text":"function FAFᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAH₂O-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAH₂O","text":"function FAH₂O(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAH₂Sᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAH₂Sᵀ","text":"function FAH₂Sᵀ(H₂Sᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FANH₄ᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FANH₄ᵀ","text":"function FANH₄ᵀ(NH₄ᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAPᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAPᵀ","text":"function FAPᵀ(Pᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FASO₄ᵀ-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FASO₄ᵀ","text":"function FASO₄ᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FASiᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FASiᵀ","text":"function FASiᵀ(Siᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAᵀ-Tuple{Real, Real, Real, Real, Real, Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAᵀ","text":"function FAᵀ(Cᵀ, Aᵀ, Bᵀ, Pᵀ, Siᵀ,  SO₄ᵀ, Fᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\nEvaluate the rational function form of the total alkalinity-pH equation\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FH⁺ᵢₙᵢ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FH⁺ᵢₙᵢ","text":"FH⁺ᵢₙᵢ(Aᵀ, Cᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\nCalculates the root for the 2nd order approximation of the  Cᵀ-Bᵀ-Aᶜ equation for H⁺ (reformulated as a cubic polynomial)  around the local minimum, if it exists.\n\nReturns * 1e-03 if Aᶜ <= 0          * 1e-10 if Aᶜ >= 2Cᵀ + Bᵀ          * 1e-07 if 0 < Aᶜ < 2Cᵀ + Bᵀ             and the 2nd order approximation does not have a solution\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FboundsAᵀₙₕ₂ₒ-Tuple{Real, Real, Real, Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FboundsAᵀₙₕ₂ₒ","text":" FboundsAᵀₙₕ₂ₒ(\n    Cᵀ, Pᵀ, Siᵀ, NH₄ᵀ=0, H₂Sᵀ=0, Pᶜᵒᵉᶠᶠ\n )\n\nCalculate the lower and upper bounds of the \"non-water-selfionization\"  contributions to total alkalinity.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.Fᵖᴴᵤₙᵢᵣₒ-Tuple{Real, Real, Real, Real, Real, Real, Real, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.Fᵖᴴᵤₙᵢᵣₒ","text":"Fᵖᴴᵤₙᵢᵣₒ(Aᵀ, Cᵀ, Pᵀ, Siᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the pH of seawater given the total alkalinity Aᵀ, total carbon Cᵀ, total phosphate Pᵀ, total silicate Siᵀ, and the carbon chemistry coefficients. Uses the SolveSAPHE package (Munhoven et al., 2013), a universal, robust, pH  solver that converges from any given initial value.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Bᵀ-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Bᵀ","text":"function F∂A∂Bᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Cᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Cᵀ","text":"F∂A∂Cᵀ(Cᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Fᵀ-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Fᵀ","text":"function F∂A∂Fᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂H₂O-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂H₂O","text":"function F∂A∂H₂O(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂H₂Sᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂H₂Sᵀ","text":"function F∂A∂H₂Sᵀ(H₂Sᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂NH₄ᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂NH₄ᵀ","text":"function F∂A∂NH₄ᵀ(NH₄ᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Pᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Pᵀ","text":"function F∂A∂Pᵀ(Pᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂SO₄ᵀ-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂SO₄ᵀ","text":"function F∂A∂SO₄ᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Siᵀ-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Siᵀ","text":"function F∂A∂Siᵀ(Siᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.BO₄H₄⁻-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.BO₄H₄⁻","text":"BO₄H₄⁻(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate borate (B(OH)₄⁻) contribution to Aᶜ using salinity as a proxy\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾-Tuple{Real, Real, Real, Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾","text":"Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾(Aᵀ, pCO₂, Pᵀ, Siᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nSolve for ocean DIC given total Alkalinity and pCO₂\n\nEstimate H⁺ (hydrogen ion conc) using estimate of Aᶜ, carbonate alkalinity after (Follows et al., 2006)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾-Tuple{Real, Real, Real, Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾","text":"Fᵖᶜᵒ²⁽ᴬᵀ⁺ᶜᵀ⁾(Aᵀ, Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nSolve for ocean pCO₂ given total Alkalinity and DIC\n\nEstimate H⁺ (hydrogen ion conc) using estimate of Aᶜ, carbonate alkalinity after (Follows et al., 2006)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HF-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HF","text":"HF(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the hydrogen fluoride (HF) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HPO₄²⁻-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HPO₄²⁻","text":"HPO₄²⁻(Pᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the monohydrogen phosphate (HPO₄²⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HSO₄⁻-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HSO₄⁻","text":"HSO₄⁻(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the hydrogen sulphate (HSO₄⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H⁺ᶠʳᵉᵉ-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H⁺ᶠʳᵉᵉ","text":"H⁺ᶠʳᵉᵉ(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the \"Free\" H⁺ contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H₂PO₄⁻-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H₂PO₄⁻","text":"H₂PO₄⁻(Pᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the dihydrogen phosphate (H₂PO₄⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H₃PO₄-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H₃PO₄","text":"H₃PO₄(Pᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate orthophosphoric acid (H₃PO₄) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.OH⁻-Tuple{Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.OH⁻","text":"OH⁻(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the hydroxide (OH⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.PO₄³⁻-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.PO₄³⁻","text":"PO₄³⁻(Pᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the phosphate (PO₄³⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.SiO₄H₃⁻-Tuple{Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.SiO₄H₃⁻","text":"SiO₄H₃⁻(Siᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the silicate (SiO(OH)₃⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾-Tuple{Real, Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾","text":"Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾(Aᵀ, pCO₂ᵃᵗᵐ, pH, Pᶜᵒᵉᶠᶠ)\n\nSolve for DIC given total Alkalinity and pCO₂\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾-Tuple{Real, Real, Real, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾","text":"Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾(Aᵀ, Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nSolve for ocean pCO₂ given total Alkalinity and DIC\n\n\n\n\n\n","category":"method"},{"location":"#ClimaOceanBiogeochemistry","page":"Home","title":"ClimaOceanBiogeochemistry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ClimaOceanBiogeochemistry.jl provides biogeochemistry models that integrate with Oceananigans.jl and ClimaOcean.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also the Oceananigans documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ClimaOceanBiogeochemistry.jl is developed by the Climate Modeling Alliance and heroic external collaborators.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To add ClimaOceanBiogeochemistry.jl to your local environment, type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> Pkg.add(\"https://github.com/CliMA/ClimaOceanBiogeochemistry.jl.git\")","category":"page"},{"location":"library/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Documentation for ClimaOceanBiogeochemistry.jl's public interface.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"library/public/#ClimaOceanBiogeochemistry","page":"Public","title":"ClimaOceanBiogeochemistry","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [ClimaOceanBiogeochemistry, \n           ClimaOceanBiogeochemistry.CarbonSystemSolvers,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver]\nPrivate = false","category":"page"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonChemistryCoefficients","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonChemistryCoefficients","text":"CarbonChemistryCoefficients(Θᶜ, Sᴬ, Δpᵦₐᵣ, params)\n\nReturn dissociation coefficients necessary to solve for the distribution of carbonate species.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonCoefficientParameters-Tuple{}","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonCoefficientParameters","text":"CarbonCoefficientParameters(a₀=0, a₁=0, a₂=0, a₃=0, a₄=0, a₅=0, b₀=0, b₁=0, b₂=0, b₃=0, c₀=0, c₁=0, c₂=0, d₀=0, d₁=0, k₀=0, k₁=0, k₂=0, p₀=0, v₀=0, v₁=0, v₂=0, v₃=0)\n\nCreate a CarbonCoefficientParameters object with the specified coefficients.\n\nArguments\n\na₀, a₁, a₂, a₃, a₄, a₅: Coefficients for the a parameters (default is 0).\nb₀, b₁, b₂, b₃: Coefficients for the b parameters (default is 0).\nc₀, c₁, c₂: Coefficients for the c parameters (default is 0).\nd₀, d₁: Coefficients for the d parameters (default is 0).\nk₀, k₁, k₂: Coefficients for the k parameters (default is 0).\np₀: Coefficient for the p parameter (default is 0).\nv₀, v₁, v₂, v₃: Coefficients for the v parameters (default is 0).\n\nReturns\n\nA CarbonCoefficientParameters object with the specified coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonSolverParameters-Tuple{}","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonSolverParameters","text":"CarbonSolverParameters(Δₕ₊::Real=1e-8, H⁺ᵗʰʳᵉˢʰ::Real=1, Iᴴ⁺ₘₐₓ::Real=100)\n\nCreate a CarbonSolverParameters object with the specified parameters.\n\nArguments\n\nΔₕ₊: A real number representing the increment for the hydrogen ion concentration. Default is 1e-8.\nH⁺ᵗʰʳᵉˢʰ: A real number representing the threshold for the hydrogen ion concentration. Default is 1.\nIᴴ⁺ₘₐₓ: A real number representing the maximum number of iterations for the solver. Default is 100.\n\nReturns\n\nA CarbonSolverParameters object with the specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonSystemParameters-Tuple{}","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonSystemParameters","text":"CarbonSystemParameters(kwargs...)\n\nThis function initializes and returns a CarbonSystemParameters object with various carbon coefficient parameters.  The parameters are used in carbon system calculations and are initialized with default values, which can be overridden      by passing keyword arguments.\n\nArguments\n\nkwargs...: Keyword arguments for various carbon coefficient parameters.\n\nKeyword Arguments\n\nSᵒᵖᵗˢ::CarbonSolverParameters: Default is CarbonSolverParameters().\nPᴴ²⁰ˢʷ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=1.0, a₁=-0.001005).\nPᵘˢ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=0.019924).\nPᴮᵀᴼᵀ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=0.000416, a₁=35.0, a₂=1.0).\nPᶜᵃᵀᴼᵀ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=0.02127, a₁=40.078, a₂=1.80655).\nPᶠᵀᴼᵀ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=6.8e-5, a₁=35.0).\nPˢᴼ⁴ᵀᴼᵀ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=0.1400, a₁=96.062, a₂=1.80655).\nPᵈⁱᶜₖₛₒₗₐ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-162.8301, a₁=218.2968, a₂=90.9241, a₃=-1.47696, b₀=0.025695, b₁=-0.025225, b₂=0.0049867).\nPᵈⁱᶜₖₚᵣₑ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-1636.75, a₁=-12.0408, a₂=-0.0327957, a₃=3.16528e-5, b₀=57.7, b₁=-0.118, p₀=1.01325).\nPᵈⁱᶜₖ₀::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-60.2409, a₁=93.4517, a₂=23.3585, b₀=0.023517, b₁=-0.023656, b₂=0.0047036).\nPᵈⁱᶜₖ₁ᵣ₉₃::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=2.83655, a₁=-2307.1266, a₂=-1.5529413, b₀=-0.20760841, b₁=-4.0484, b₂=0.08468345, b₃=-0.00654208, v₀=-25.5, v₁=-0.151, v₂=0.1271, k₀=-3.08e-3, k₁=-0.578e-3, k₂=0.0877e-3).\nPᵈⁱᶜₖ₂ᵣ₉₃::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-9.226508, a₁=-3351.6106, a₂=-0.2005743, b₀=-0.106901773, b₁=-23.9722, b₂=0.1130822, b₃=-0.00846934, v₀=-15.82, v₁=0.321, v₂=-0.0219, k₀=1.13e-3, k₁=-0.314e-3, k₂=-0.1475e-3).\nPᵈⁱᶜₖ₁ₘ₉₅::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=2.18867, a₁=-2275.0360, a₂=-1.468591, b₀=-0.138681, b₁=-9.33291, b₂=0.0726483, b₃=-0.00574938, v₀=-25.5, v₁=-0.151, v₂=0.1271, k₀=-3.08e-3, k₁=-0.578e-3, k₂=0.0877e-3).\nPᵈⁱᶜₖ₂ₘ₉₅::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-0.84226, a₁=-3741.1288, a₂=-1.437139, b₀=-0.128417, b₁=-24.41239, b₂=0.1195308, b₃=-0.00912840, v₀=-15.82, v₁=0.321, v₂=-0.0219, k₀=1.13e-3, k₁=-0.314e-3, k₂=-0.1475e-3).\nPᵈⁱᶜₖ₁ₗ₀₀::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=61.2172, a₁=-3633.86, a₂=-9.67770, b₀=0.011555, b₁=-0.0001152, v₀=-25.5, v₁=-0.151, v₂=0.1271, k₀=-3.08e-3, k₁=-0.578e-3, k₂=0.0877e-3).\nPᵈⁱᶜₖ₂ₗ₀₀::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-25.9290, a₁=-471.78, a₂=3.16967, b₀=0.01781, b₁=-0.0001122, v₀=-15.82, v₁=0.321, v₂=-0.0219, k₀=1.13e-3, k₁=-0.314e-3, k₂=-0.1475e-3).\nPᴮₖ₁::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-8966.90, a₁=-2890.53, a₂=-77.942, a₃=1.728, a₄=-0.0996, b₀=148.0248, b₁=137.1942, b₂=1.62142, c₀=-24.4344, c₁=-25.085, c₂=-0.2474, d₀=0.053105, v₀=-29.48, v₁=0.295, v₂=0.1622, v₃=-0.002608, k₀=-2.84e-3, k₁=0.354e-3).\nPᴴ²ᴼₖ₁::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=148.9802, a₁=-13847.26, a₂=-23.6521, b₀=-5.977, b₁=118.67, b₂=1.0495, c₀=-0.01615, v₀=-20.02, v₁=0.1119, v₂=-0.1409E-02, k₀=-5.13e-3, k₁=0.0794e-3).\nPᴾᴼ⁴ₖ₁::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=115.54, a₁=-4576.752, a₂=-18.453, b₀=0.69171, b₁=-106.736, b₂=-0.01844, b₃=-0.65643, v₀=-14.51, v₁=0.1211, v₂=-0.321E-03, k₀=-2.67e-3, k₁=0.0427e-3).\nPᴾᴼ⁴ₖ₂::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=172.1033, a₁=-8814.715, a₂=-27.927, b₀=1.3566, b₁=-160.340, b₂=-0.05778, b₃=0.37335, v₀=-23.12, v₁=0.1758, v₂=-0.002647, k₀=-5.15e-3, k₁=0.09e-3).\nPᴾᴼ⁴ₖ₃::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-18.126, a₁=-3070.75, a₂=2.81197, a₃=17.27039, a₄=-0.09984, a₅=-44.99486, v₀=-26.57, v₁=0.2020, v₂=-3.042e-3, k₀=-4.08e-3, k₁=0.0714e-3).\nPˢⁱᵗₖ₁::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=117.40, a₁=-8904.2, a₂=-19.334, b₀=3.5913, b₁=-458.79, b₂=-1.5998, b₃=188.74, c₀=0.07871, c₁=-12.1652, v₀=-29.48, v₁=0.0, v₂=0.1622, v₃=-0.002608, k₀=-2.84e-3, k₁=0.354e-3).\nPᴴ²ˢₖ₁::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=225.838, a₁=-13275.3, a₂=-34.6435, a₃=0.3449, a₄=-0.0274, v₀=-14.80, v₁=0.0020, v₂=-0.400E-03, k₀=2.89e-3, k₁=0.054e-3).\nPᴺᴴ⁴ₖ₁::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-0.25444, a₁=-6285.33, a₂=0.0001635, b₀=0.46532, b₁=-123.7184, b₂=-0.01992, b₃=3.17556, v₀=-26.43, v₁=0.0889, v₂=-0.905E-03, k₀=-5.03E-03, k₁=0.0814E-03).\nPᴴᶠᵦ₁::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=12.641, a₁=-1590.2, a₂=-1.525, v₀=-9.78, v₁=-0.0090, v₂=-0.942E-03, k₀=-3.91e-3, k₁=0.054e-3).\nPᴴᶠₖ₁::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-9.68, a₁=874.0, a₂=0.111, v₀=-9.78, v₁=-0.0090, v₂=-0.942E-3, k₀=-3.91e-3, k₁=0.054e-3).\nPᴴˢᴼ⁴ₖ₁::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=141.328, a₁=-4276.1, a₂=-23.093, b₀=324.57, b₁=-13856., b₂=-47.986, c₀=-771.54, c₁=35474., c₂=114.723, d₀=-2698., d₁=1776., v₀=-18.03, v₁=0.0466, v₂=0.316E-03, k₀=-4.53e-3, k₁=0.0900e-3).\nPᶜᵃˡᶜⁱᵗᵉₛₚ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-171.9065, a₁=-0.077993, a₂=2839.319, a₃=71.595, b₀=-0.77712, b₁=0.0028426, b₂=178.34, c₀=-0.07711, d₀=0.0041249, v₀=-48.76, v₁=0.5304, k₀=-11.76e-3, k₁=0.3692e-3).\nPᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ::CarbonCoefficientParameters: Default is CarbonCoefficientParameters(a₀=-171.945, a₁=-0.077993, a₂=2903.293, a₃=71.595, b₀=-0.068393, b₁=0.0017276, b₂=88.135, c₀=-0.10018, d₀=0.0059415, v₀=-48.76, v₁=0.5304, v₂=2.8, k₀=-11.76e-3, k₁=0.3692e-3).\n\nReturns\n\nCarbonSystemParameters: An object containing all the initialized carbon coefficient parameters.\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.UniversalRobustCarbonSystem-Tuple{}","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.UniversalRobustCarbonSystem","text":"UniversalRobustCarbonSystem(\n        pH      :: Real = 8.0,\n        pCO₂ᵃᵗᵐ :: Real = 280.0e-6,\n        Θ       :: Real = 25.0,\n        Sᴬ      :: Real = 35.0,\n        Δpᵦₐᵣ   :: Real = 0.0,\n        Cᵀ      :: Real = 2050.0e-6,\n        Aᵀ      :: Real = 2350.0e-6,\n        Pᵀ      :: Real = 1.0e-6,\n        Siᵀ     :: Real = 15.0e-6,\n        kwargs...,\n        )\n\nUses the Munhoven (2013) SolveSAPHE package to solve the distribution of carbon species. Returns a CarbonSystem object.\n\nThe function takes the following keyword arguments:\n\npH: The pH of the seawater\npCO₂ᵃᵗᵐ: The atmospheric partial pressure of CO₂\nΘ: The temperature of the seawater\nSᴬ: The salinity of the seawater\nΔpᵦₐᵣ: The applied pressure factor\nCᵀ: The total carbon concentration in seawater\nAᵀ: The total alkalinity of seawater\nPᵀ: The total phosphate concentration in seawater\nSiᵀ: The total silicate concentration in seawater\nNH₄ᵀ: The total ammonium concentration in seawater\nH₂Sᵀ: The total hydrogen sulfide concentration in seawater\nkwargs: Alternative solver options or dissociation coefficients to be          passed to the CarbonSystemParameters constructor.\n\nThe function returns a CarbonSystem object.\n\nReferences:\n\nMunhoven, G. (2013). \n\n\n\n\n\n","category":"method"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.AlkalinityCorrectionCarbonSystem-Tuple{}","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.AlkalinityCorrectionCarbonSystem","text":"AlkalinityCorrectionCarbonSystem(\n        Θ       :: FT = 25.0,\n        Sᴬ      :: FT = 35.0,\n        Δpᵦₐᵣ   :: FT = 0.0,\n        Cᵀ      :: FT = 2050.0e-6,\n        Aᵀ      :: FT = 2350.0e-6,\n        Pᵀ      :: FT = 1.0e-6,\n        Siᵀ     :: FT = 15.0e-6,\n        pH      :: FT = 8.0,\n        pCO₂ᵃᵗᵐ :: FT = 280.0e-6,\n        )\n\nUses the Follows et al (2006) method to solve the distribution of carbon species\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.DirectCubicCarbonSystem-Tuple{}","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.DirectCubicCarbonSystem","text":"DirectCubicCarbonSystem(\n        Θ       :: FT = 25.0,\n        Sᴬ      :: FT = 35.0,\n        Δpᵦₐᵣ   :: FT = 0.0,\n        Cᵀ      :: FT = 2050.0e-6,\n        Aᵀ      :: FT = 2350.0e-6,\n        pH      :: FT = 8.0,\n        pCO₂ᵃᵗᵐ :: FT = 280.0e-6,\n        )\n\nDirectCubicCarbonSolver solves a cubic equation in terms of [H⁺];  Not for serious use, but as a placeholder and for testing purposes\n\n\n\n\n\n","category":"method"}]
}
