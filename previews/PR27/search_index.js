var documenterSearchIndex = {"docs":
[{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"EditURL = \"../../../examples/single_column_carbon_alkalinity_nutrients.jl\"","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Nutrients,-plankton,-bacteria,-detritus","page":"Single column carbon, alkalinity, nutrients","title":"Nutrients, plankton, bacteria, detritus","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"This example illustrates how to use ClimaOceanBiogeochemistry's CarbonAlkalinityNutrients model in a single column context.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"using ClimaOceanBiogeochemistry: CarbonAlkalinityNutrients\n\nusing Oceananigans\nusing Oceananigans.Units\nusing Oceananigans.TurbulenceClosures: CATKEVerticalDiffusivity\n\nusing Printf\nusing CairoMakie","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#A-single-column-grid","page":"Single column carbon, alkalinity, nutrients","title":"A single column grid","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We set up a single column grid with 4 m grid spacing that's 256 m deep:","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"grid = RectilinearGrid(size = 64,\n                       z = (-256meters, 0),\n                       topology = (Flat, Flat, Bounded))","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Convection-then-quiet","page":"Single column carbon, alkalinity, nutrients","title":"Convection then quiet","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"To illustrate the dynamics of CarbonAlkalinityNutrients, we set up a physical scenario in which strong convection drives turbulent mixing for 4 days, and then abruptly shuts off. Once the convective turbulence dies down, plankton start to grow.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"Qᵇ(t) = ifelse(t < 4days, 1e-7, 0.0)\nb_bcs = FieldBoundaryConditions(top = FluxBoundaryCondition(Qᵇ))","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We put the pieces together. The important line here is biogeochemistry = CarbonAlkalinityNutrients(). We use all default parameters.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"model = HydrostaticFreeSurfaceModel(; grid,\n                                    biogeochemistry = CarbonAlkalinityNutrients(),\n                                    closure = CATKEVerticalDiffusivity(),\n                                    tracers = (:b, :e),\n                                    buoyancy = BuoyancyTracer(),\n                                    boundary_conditions = (; b=b_bcs))","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Initial-conditions","page":"Single column carbon, alkalinity, nutrients","title":"Initial conditions","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We initialize the model with reasonable nutrients, detritus, and a nutrient mixed layer.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"N₀ = 1e-1 # Surface nutrient concentration\nD₀ = 1e-1 # Surface detritus concentration\ndᴺ = 50.0 # Nutrient mixed layer depth\nN² = 1e-5 # Buoyancy gradient, s⁻²\n\nbᵢ(z) = N² * z\nNᵢ(z) = N₀ * max(1, exp(-(z + dᴺ) / 100))\nDᵢ(z) = D₀ * exp(z / 10)","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"set!(model, b=bᵢ, P=1e-1, B=1e-1, D=Dᵢ, N=Nᵢ, e=1e-6)","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"set!(model, b=bᵢ, e=1e-6)","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#A-simulation-of-physical-biological-interaction","page":"Single column carbon, alkalinity, nutrients","title":"A simulation of physical-biological interaction","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"We construct a simple simulation that emits a message every 10 iterations and outputs tracer fields.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"simulation = Simulation(model, Δt=10minutes, stop_time=12days)\n\nprogress(sim) = @printf(\"Iteration: %d, time: %s\\n\", iteration(sim), prettytime(sim))\nsimulation.callbacks[:progress] = Callback(progress, IterationInterval(10))\n\nfilename = \"single_column_carbon_alkalinity_nutrients.jld2\"\n\nsimulation.output_writers[:fields] = JLD2OutputWriter(model, model.tracers;\n                                                      filename,\n                                                      schedule = TimeInterval(20minutes),\n                                                      overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/#Visualization","page":"Single column carbon, alkalinity, nutrients","title":"Visualization","text":"","category":"section"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"All that's left is to visualize the results.","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"bt   = FieldTimeSeries(filename, \"b\")\net   = FieldTimeSeries(filename, \"e\")\nDICt = FieldTimeSeries(filename, \"DIC\")\nAlkt = FieldTimeSeries(filename, \"Alk\")\nPO₄t = FieldTimeSeries(filename, \"PO₄\")\nNO₃t = FieldTimeSeries(filename, \"NO₃\")\nDOPt = FieldTimeSeries(filename, \"DOP\")\nFet  = FieldTimeSeries(filename, \"Fe\")\n\nt = bt.times\nnt = length(t)\nz = znodes(bt)\n\nfig = Figure(size=(1200, 600))\n\naxb = Axis(fig[1, 1], xlabel=\"Buoyancy (m² s⁻³)\", ylabel=\"z (m)\")\naxe = Axis(fig[1, 2], xlabel=\"Turbulent kinetic energy (m² s²)\")\naxP = Axis(fig[1, 3], xlabel=\"Concentration (mmol)\")\naxN = Axis(fig[1, 4], xlabel=\"Nutrient concentration (mmol)\")\n\nxlims!(axe, -1e-5, 1e-3)\nxlims!(axP, 0, 0.2)\n\nslider = Slider(fig[2, 1:4], range=1:nt, startvalue=1)\nn = slider.value\n\ntitle = @lift @sprintf(\"Convecting plankton at t = %d hours\", t[$n] / hour)\nLabel(fig[0, 1:4], title)\n\nbn = @lift interior(bt[$n], 1, 1, :)\nen = @lift interior(et[$n], 1, 1, :)\nDICn = @lift interior(DICt[$n], 1, 1, :)\nAlkn = @lift interior(Alkt[$n], 1, 1, :)\nPO₄n = @lift interior(PO₄t[$n], 1, 1, :)\nNO₃n = @lift interior(NO₃t[$n], 1, 1, :)\nDOPn = @lift interior(DOPt[$n], 1, 1, :)\nFen  = @lift interior(Fet[$n], 1, 1, :)\n\nlines!(axb, bn, z)\nlines!(axe, en, z)\n\nlines!(axP, DICn, z, label=\"DIC\")\nlines!(axP, PO₄n, z, label=\"Phosphate\")\nlines!(axP, Fen, z, label=\"Iron\")\naxislegend(axP)\n\nlines!(axN, DOPn, z)\n\nrecord(fig, \"carbon_alkalinity_nutrients.mp4\", 1:nt, framerate=24) do nn\n    n[] = nn\nend\nnothing #hide","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"(Image: )","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"","category":"page"},{"location":"literated/single_column_carbon_alkalinity_nutrients/","page":"Single column carbon, alkalinity, nutrients","title":"Single column carbon, alkalinity, nutrients","text":"This page was generated using Literate.jl.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"EditURL = \"../../../examples/single_column_nutrients_plankton_bacteria_detritus.jl\"","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/#Nutrients,-plankton,-bacteria,-detritus","page":"Single column nutrients, plankton, bacteria, detritus","title":"Nutrients, plankton, bacteria, detritus","text":"","category":"section"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"This example illustrates how to use ClimaOceanBiogeochemistry's NutrientsPlanktonBacteriaDetrius model in a single column context.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"using ClimaOceanBiogeochemistry: NutrientsPlanktonBacteriaDetritus\n\nusing Oceananigans\nusing Oceananigans.Units\n\nusing Printf\nusing CairoMakie","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/#A-single-column-grid","page":"Single column nutrients, plankton, bacteria, detritus","title":"A single column grid","text":"","category":"section"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"We set up a single column grid whose depth is H and with Nz points","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"H = 1000meters\nz = (-H, 0)\nNz = 100\n\ngrid = RectilinearGrid(size = Nz; z, topology = (Flat, Flat, Bounded))","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"A prescribed vertical tracer diffusivity","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"We define a tracer diffusivity that mixes a lot near the surface (in the top 50 m), and less down below.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"@inline κ(z, t) = 1e-4 + 1e-2 * exp(z / 25) + 1e-2 * exp(-(z + 1000) / 50)\nvertical_diffusion = VerticalScalarDiffusivity(; κ)","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"We put the pieces together. The important line here is biogeochemistry = NutrientsPlanktonBacteriaDetritus(; grid). We use all default parameters.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"model = HydrostaticFreeSurfaceModel(; grid,\n                                    velocities = PrescribedVelocityFields(),\n                                    biogeochemistry = NutrientsPlanktonBacteriaDetritus(; grid),\n                                    tracers = (:N, :P, :Z, :B, :D1, :D2),\n                                    tracer_advection = WENO(),\n                                    buoyancy = nothing,\n                                    closure = vertical_diffusion)","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/#Initial-conditions","page":"Single column nutrients, plankton, bacteria, detritus","title":"Initial conditions","text":"","category":"section"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"We initialize the model with reasonable nutrients, detritus, and a nutrient mixed layer.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"set!(model, N=3, P=1e-1, Z=1e-1, B=1e-1, D1=8e-2, D2=2e-2)\n\nsimulation = Simulation(model, Δt=30minutes, stop_time=100days)\n\nfunction progress(sim)\n    @printf(\"Iteration: %d, time: %s, total(N): %.2e \\n\",\n            iteration(sim), prettytime(sim),\n            sum(model.tracers.N) + sum(model.tracers.P) + sum(model.tracers.B) + sum(model.tracers.D1) + sum(model.tracers.D2))\n    return nothing\nend\n\nsimulation.callbacks[:progress] = Callback(progress, IterationInterval(10))","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Let's see the initial condition","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"N = model.tracers.N\nP = model.tracers.P\nZ = model.tracers.Z\nB = model.tracers.B\nD1 = model.tracers.D1\nD2 = model.tracers.D2\n\nz = znodes(N)\n\nfig = Figure(size=(1200, 600))\n\naxN  = Axis(fig[1, 1], xlabel=\"Nutrient concentration (N)\", ylabel=\"z (m)\")\naxP  = Axis(fig[1, 2], xlabel=\"Phytoplankton concentration (P)\")\naxZ  = Axis(fig[1, 3], xlabel=\"Zooplankton concentration (Z)\")\naxB  = Axis(fig[1, 4], xlabel=\"Bacteria concentration (B)\")\naxD1 = Axis(fig[1, 5], xlabel=\"Detritus concentration (D1)\")\naxD2 = Axis(fig[1, 6], xlabel=\"Detritus concentration (D2)\")\n\nlines!(axN, interior(N, 1, 1, :), z)\nlines!(axP, interior(P, 1, 1, :), z)\nlines!(axZ, interior(Z, 1, 1, :), z)\nlines!(axB, interior(B, 1, 1, :), z)\nlines!(axD1, interior(D1, 1, 1, :), z)\nlines!(axD2, interior(D2, 1, 1, :), z)\n\ncurrent_figure()","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Now we add an output writer to the simulation and run the simulation.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"filename = \"nutrients_plankton_bacteria_detritus.jld2\"\n\nsimulation.output_writers[:fields] = JLD2OutputWriter(model, model.tracers;\n                                                      filename,\n                                                      schedule = TimeInterval(1day),\n                                                      overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/#Visualization","page":"Single column nutrients, plankton, bacteria, detritus","title":"Visualization","text":"","category":"section"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"All that's left is to visualize the results.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Pt = FieldTimeSeries(filename, \"P\")\nZt = FieldTimeSeries(filename, \"Z\")\nBt = FieldTimeSeries(filename, \"B\")\nD1t = FieldTimeSeries(filename, \"D1\")\nD2t = FieldTimeSeries(filename, \"D2\")\nNt = FieldTimeSeries(filename, \"N\")\n\nt = Pt.times\nnt = length(t)\nz = znodes(Pt)\n\nfig = Figure(size=(1200, 600))\n\naxN  = Axis(fig[1, 1], xlabel=\"[Nutrient] (mmol m⁻³)\", ylabel=\"z (m)\")\naxP  = Axis(fig[1, 2], xlabel=\"[Phytoplankton] (mmol m⁻³)\")\naxZ  = Axis(fig[1, 3], xlabel=\"[Zooplankton] (mmol m⁻³)\")\naxB  = Axis(fig[1, 4], xlabel=\"[Bacteria] (mmol m⁻³)\")\naxD1 = Axis(fig[1, 5], xlabel=\"[Dissolved Detritus] (mmol m⁻³)\")\naxD2 = Axis(fig[1, 6], xlabel=\"[Particulate Detritus] (mmol m⁻³)\")\n\nslider = Slider(fig[2, 1:6], range=1:nt, startvalue=1)\nn = slider.value\n\ntitle = @lift @sprintf(\"Equilibrium biogeochemistry at t = %d days\", t[$n] / day)\nLabel(fig[0, 1:6], title)\n\nNn  = @lift interior(Nt[$n], 1, 1, :)\nPn  = @lift interior(Pt[$n], 1, 1, :)\nZn  = @lift interior(Zt[$n], 1, 1, :)\nBn  = @lift interior(Bt[$n], 1, 1, :)\nD1n = @lift interior(D1t[$n], 1, 1, :)\nD2n = @lift interior(D2t[$n], 1, 1, :)\n\nlines!(axP, Pn, z)\nlines!(axZ, Zn, z)\nlines!(axD1, D1n, z)\nlines!(axD2, D2n, z)\nlines!(axB, Bn, z)\nlines!(axN, Nn, z)\n\nrecord(fig, \"nutrients_plankton_bacteria_detritus.mp4\", 1:nt, framerate=24) do nn\n    n[] = nn\nend\nnothing #hide","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"(Image: )","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Let's plot a snapshot of the last frame.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Nn_last  = interior(Nt[end], 1, 1, :)\nPn_last  = interior(Pt[end], 1, 1, :)\nZn_last  = interior(Zt[end], 1, 1, :)\nBn_last  = interior(Bt[end], 1, 1, :)\nD1n_last = interior(D1t[end], 1, 1, :)\nD2n_last = interior(D2t[end], 1, 1, :)\n\nlast_frame = Figure(size=(1200, 600))\naxN  = Axis(last_frame[1, 1], xlabel=\"[N] (mmol m⁻³)\", ylabel=\"z (m)\")\naxP  = Axis(last_frame[1, 2], xlabel=\"[P] (mmol m⁻³)\")\naxZ  = Axis(last_frame[1, 3], xlabel=\"[Z] (mmol m⁻³)\")\naxB  = Axis(last_frame[1, 4], xlabel=\"[B] (mmol m⁻³)\")\naxD1 = Axis(last_frame[1, 5], xlabel=\"[dD] (mmol m⁻³)\")\naxD2 = Axis(last_frame[1, 6], xlabel=\"[pD] (mmol m⁻³)\")\n\nlines!(axP, Pn_last, z)\nlines!(axZ, Zn_last, z)\nlines!(axD1, D1n_last, z)\nlines!(axD2, D2n_last, z)\nlines!(axB, Bn_last, z)\nlines!(axN, Nn_last, z)\n\nsave(\"NPZDB.png\", last_frame)\nnothing #hide","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"(Image: )","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"Another figure: we plot the sum of each variable against time.","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"N_time  = zeros(1:nt)\nP_time  = zeros(1:nt)\nZ_time  = zeros(1:nt)\nB_time  = zeros(1:nt)\nD1_time = zeros(1:nt)\nD2_time = zeros(1:nt)\n\nfor times = 1:nt\n    N_time[times] = sum(Nt[:, :, :, times])\n    P_time[times] = sum(Pt[:, :, :, times])\n    Z_time[times] = sum(Zt[:, :, :, times])\n    B_time[times] = sum(Bt[:, :, :, times])\n    D1_time[times] = sum(D1t[:, :, :, times])\n    D2_time[times] = sum(D2t[:, :, :, times])\nend\n\nTimeVar = Figure()\nax2 = Axis(TimeVar[1, 1], title=\"Nutrients evolution\", ylabel=\"Variable (mmol m⁻³)\", xlabel=\"Time (days)\")\nlines!(ax2, 1:nt, N_time, label=\"N\")\nlines!(ax2, 1:nt, P_time, label=\"P\")\nlines!(ax2, 1:nt, Z_time, label=\"Z\")\nlines!(ax2, 1:nt, B_time, label=\"B\")\nlines!(ax2, 1:nt, D1_time, label=\"dD\")\nlines!(ax2, 1:nt, D2_time, label=\"pD\")\n\naxislegend()\n\nsave(\"TimeVariations.png\", TimeVar)\nnothing #hide","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"(Image: )","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"","category":"page"},{"location":"literated/single_column_nutrients_plankton_bacteria_detritus/","page":"Single column nutrients, plankton, bacteria, detritus","title":"Single column nutrients, plankton, bacteria, detritus","text":"This page was generated using Literate.jl.","category":"page"},{"location":"library/function_index/#main-index","page":"Function index","title":"Index","text":"","category":"section"},{"location":"library/function_index/","page":"Function index","title":"Function index","text":"Pages = [\"public.md\", \"internals.md\", \"function_index.md\"]","category":"page"},{"location":"library/outline/#Library-Outline","page":"Contents","title":"Library Outline","text":"","category":"section"},{"location":"library/outline/","page":"Contents","title":"Contents","text":"Pages = [\"public.md\", \"internals.md\", \"function_index.md\"]","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"EditURL = \"../../../examples/simple_plankton_growth_death.jl\"","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"using Oceananigans\nusing Oceananigans.Units\nusing Oceananigans\nusing Oceananigans.Grids: znode\nusing Oceananigans.Biogeochemistry: AbstractBiogeochemistry\nusing Oceananigans.TurbulenceClosures: CATKEVerticalDiffusivity\n\nusing Printf\n\nimport Oceananigans.Biogeochemistry: required_biogeochemical_tracers\n\n\"\"\"\n    SimplePlanktonGrowthDeath(; growth_rate = 1/day\n                                shortwave_attenuation_scale = 20.0\n                                mortality_rate = 0.1/day)\n\nReturn a single-tracer biogeochemistry model for growing and dying plankton.\n\"\"\"\nBase.@kwdef struct SimplePlanktonGrowthDeath{FT} <: AbstractBiogeochemistry\n    growth_rate :: FT = 1/day\n    shortwave_attenuation_scale :: FT = 20.0\n    mortality_rate :: FT = 0.1/day\nend\n\n@inline required_biogeochemical_tracers(::SimplePlanktonGrowthDeath) = tuple(:P)\n\nconst c = Center()\n\n@inline function (bgc::SimplePlanktonGrowthDeath)(i, j, k, grid, ::Val{:P}, clock, fields)\n   μ₀ = bgc.growth_rate\n   λ = bgc.shortwave_attenuation_scale\n   m = bgc.mortality_rate\n   P = @inbounds fields.P[i, j, k]\n   z = znode(i, j, k, grid, c, c, c)\n   return (μ₀ * exp(z / λ) - m) * P\nend","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"We set up the model","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"grid = RectilinearGrid(size = 64,\n                       z = (-256meters, 0),\n                       topology = (Flat, Flat, Bounded))\n\nQᵇ(t) = ifelse(t < 4days, 1e-7, 0.0)\nb_bcs = FieldBoundaryConditions(top = FluxBoundaryCondition(Qᵇ))\n\nmodel = HydrostaticFreeSurfaceModel(; grid,\n                                    biogeochemistry = SimplePlanktonGrowthDeath(),\n                                    closure = CATKEVerticalDiffusivity(),\n                                    tracers = (:b, :e),\n                                    buoyancy = BuoyancyTracer(),\n                                    boundary_conditions = (; b=b_bcs))\n\nN² = 1e-5 # s⁻²\nbᵢ(z) = N² * z\nset!(model, b=bᵢ, P=1e-2, e=1e-6)\n\nsimulation = Simulation(model, Δt=10minutes, stop_time=8days)\n\nprogress(sim) = @printf(\"Iteration: %d, time: %s, max(P): %.2e \\n\",\n                        iteration(sim), prettytime(sim), maximum(model.tracers.P))\n\nsimulation.callbacks[:progress] = Callback(progress, IterationInterval(10))\n\noutputs = merge(model.velocities, model.tracers)\nfilename = \"simple_plankton_growth_death.jld2\"\n\nsimulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;\n                                                      filename,\n                                                      schedule = TimeInterval(20minutes),\n                                                      overwrite_existing = true)\n\nrun!(simulation)","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"Now we load the saved output and plot","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"using CairoMakie\n\nbt = FieldTimeSeries(filename, \"b\")\net = FieldTimeSeries(filename, \"e\")\nPt = FieldTimeSeries(filename, \"P\")\n\nt = bt.times\nNt = length(t)\nz = znodes(bt)\n\nfig = Figure(size=(800, 400))\n\naxb = Axis(fig[1, 1], ylabel=\"z (m)\", xlabel=\"Buoyancy (m² s⁻³)\")\naxe = Axis(fig[1, 2], ylabel=\"z (m)\", xlabel=\"Turbulent kinetic energy (m² s²)\")\naxP = Axis(fig[1, 3], ylabel=\"z (m)\", xlabel=\"Plankton concentration\")\n\nxlims!(axe, -1e-5, 1e-3)\nxlims!(axP, 0, 0.1)\n\nn = Observable(1)\n\ntitle = @lift @sprintf(\"Convecting plankton at t = %d days\", t[$n] / day)\nLabel(fig[0, 1:3], title)\n\nbn = @lift interior(bt[$n], 1, 1, :)\nen = @lift interior(et[$n], 1, 1, :)\nPn = @lift interior(Pt[$n], 1, 1, :)\n\nlines!(axb, bn, z)\nlines!(axe, en, z)\nlines!(axP, Pn, z)\n\nfig\n\nrecord(fig, \"simple_plankton_growth_death.mp4\", 1:Nt, framerate=24) do nn\n    n[] = nn\nend","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"(Image: )","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"","category":"page"},{"location":"literated/simple_plankton_growth_death/","page":"Simple plankton growth and death","title":"Simple plankton growth and death","text":"This page was generated using Literate.jl.","category":"page"},{"location":"library/internals/#Private-types-and-functions","page":"Private","title":"Private types and functions","text":"","category":"section"},{"location":"library/internals/","page":"Private","title":"Private","text":"Documentation for ClimaOceanBiogeochemistry.jl's internal interface.","category":"page"},{"location":"library/internals/#ClimaOceanBiogeochemistry","page":"Private","title":"ClimaOceanBiogeochemistry","text":"","category":"section"},{"location":"library/internals/","page":"Private","title":"Private","text":"Modules = [ClimaOceanBiogeochemistry, \n           ClimaOceanBiogeochemistry.CarbonSystemSolvers,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver]\nPublic  = false","category":"page"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:Alk}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for ALK\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:DIC}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for DIC\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:DOP}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for DOP\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:Fe}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for FeT\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:NO₃}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for NO₃\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CAN-Tuple{Any, Any, Any, Any, Val{:PO₄}, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CAN","text":"Tracer sources and sinks for PO₄\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonAlkalinityNutrients-Tuple{}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonAlkalinityNutrients","text":"CarbonAlkalinityNutrients(; reference_density                           = 1024,\n                            maximum_net_community_production_rate       = 1 / day,\n                            phosphate_half_saturation                   = 1e-7 * reference_density,\n                            nitrate_half_saturation                     = 1.6e-6 * reference_density,\n                            iron_half_saturation                        = 1e-10 * reference_density,\n                            PAR_half_saturation                         = 10.0,\n                            PAR_attenuation_scale                       = 25.0,\n                            fraction_of_particulate_export              = 0.33\n                            dissolved_organic_phosphate_remin_timescale = 1 / 30day,\n                            stoichoimetric_ratio_carbon_to_phosphate    = 106.0\n                            stoichoimetric_ratio_nitrate_to_phosphate   = 16.0\n                            stoichoimetric_ratio_phosphate_to_oxygen    = 170.0,\n                            stoichoimetric_ratio_phosphate_to_iron      = 4.68e-4\n                            stoichoimetric_ratio_carbon_to_nitrate      = 106 / 16\n                            stoichoimetric_ratio_carbon_to_oxygen       = 106 / 170,\n                            stoichoimetric_ratio_carbon_to_iron         = 106 / 1.e-3\n                            stoichoimetric_ratio_silicate_to_phosphate  = 15.0\n                            rain_ratio_inorganic_to_organic_carbon      = 1e-1\n                            martin_curve_exponent                       = 0.84,\n                            iron_scavenging_rate                        = 5e-4 / day,\n                            ligand_concentration                        = 1e-9 * reference_density,\n                            ligand_stability_coefficient                = 1e8)\n\nReturn a six-tracer biogeochemistry model for the interaction of carbon, alkalinity, and nutrients.\n\nKeyword Arguments\n\nTracer names\n\nDIC: Dissolved Inorganic Carbon\nAlk: Alkalinity\nPO₄: Phosphate (macronutrient)\nNO₃: Nitrate (macronutrient)\nDOP: Dissolved Organic Phosphate (macronutrient)\nFe: Dissolved Iron (micronutrient)\n\nBiogeochemical functions\n\ntransitions for DIC, Alk, PO₄, NO₃, DOP, and Fe\nbiogeochemical_drift_velocity for D, modeling the sinking of detritus at a constant detritus_sinking_speed.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.NutrientsPlanktonBacteriaDetritus-Tuple{}","page":"Private","title":"ClimaOceanBiogeochemistry.NutrientsPlanktonBacteriaDetritus","text":"NutrientsPlanktonBacteriaDetritus(; grid,\n                                    maximum_plankton_growth_rate = 1/day,\n                                    maximum_bacteria_growth_rate = 1/day\n                                    maximum_grazing_rate         = 3/day\n                                    bacteria_yield               = 0.2\n                                    zooplankton_yield            = 0.3\n                                    linear_remineralization_rate = 0.03/day,\n                                    linear_mortality_rate        = 0.01/day,\n                                    quadratic_mortality_rate     = 0.1/day,\n                                    quadratic_mortality_rate_Z   = 1/day,\n                                    nutrient_half_saturation     = 0.1,\n                                    detritus_half_saturation     = 0.1,\n                                    grazing_half_saturation      = 3.0,\n                                    PAR_half_saturation          = 10.0,\n                                    PAR_attenuation_scale        = 25.0,\n                                    detritus_vertical_velocity   = -10/day)\n\nReturn a six-tracer biogeochemistry model for the interaction of nutrients (N), phytoplankton (P),  zooplankton(Z), bacteria (B), dissolved detritus (D1), and particulate detritus (D2).\n\nKeyword Arguments\n\ngrid (required): An Oceananigans' grid.\nmaximum_plankton_growth_rate: (s⁻¹) Growth rate of plankton P unlimited by the                                   availability of nutrients and light. Default: 1/day.\nmaximum_bacteria_growth_rate: (s⁻¹) Growth rate of plankton B unlimited by the                                 availability of nutrients and light. Default = 0.5/day.\nmaximum_grazing_rate: (s⁻¹) Maximum grazing rate of phytoplankton by zooplankton.\nbacteria_yield: Determines fractional nutrient production by bacteria production                    relative to consumption of detritus such that _t N  _t D = 1 - y,                   where y = bacteria_yield. Default: 0.2.\nlinear_remineralization_rate: (s⁻¹) Remineralization rate constant of detritus 'D',                                  assuming linear remineralization of 'D', while                                  implicitly modeling bacteria 'B'. Default = 0.3/day.\nlinear_mortality_rate: (s⁻¹) Linear term of the mortality rate of both plankton and bacteria.\nquadratic_mortality_rate: (s⁻¹) Quadratic term of the mortality rate of both plankton and bacteria.\nnutrient_half_saturation: (mmol m⁻³) Half-saturation of nutrients for plankton production.\ndetritus_half_saturation: (mmol m⁻³) Half-saturation of nutrients for bacteria production.                             Default = 10.0 mmol m⁻³.\nphytoplankton_half_saturation: (mmol m⁻³) Half-saturation of phytoplankton for zooplankton production.\nzooplankton_assimilation: Fractional assimilation efficiency for zooplankton.\nPAR_half_saturation: (W m⁻²) Half-saturation of photosynthetically available radiation (PAR)                        for plankton production.\nPAR_attenuation_scale: (m) Depth scale over which photosynthetically available radiation (PAR)                           attenuates exponentially.\ndetritus_sinking_speed: (m s⁻¹) Sinking velocity of particulate detritus.\n\nTracer names\n\nN: nutrients\nP: phytoplankton\nZ: zooplankton\nB: bacteria\nD1: detritus 1 - dissolved\nD2: detritus 2 - particulate\n\nBiogeochemical functions\n\ntransitions for N, P, Z, B, D1, D2\nbiogeochemical_drift_velocity for D2, modeling the sinking of detritus at a constant detritus_sinking_speed.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.iron_scavenging-NTuple{4, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.iron_scavenging","text":"Iron scavenging should depend on free iron, involves solving a quadratic equation in terms of ligand concentration and stability coefficient, but this is a simple first order approximation.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonChemistryCoefficients-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.CarbonChemistryCoefficients","text":"CarbonChemistryCoefficients(Θᶜ, Sᴬ, Δpᵦₐᵣ)\n\nReturn dissociation coefficients necessary to solve for the distribution of carbonate species.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Bᵀᴼᵀ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Bᵀᴼᵀ","text":"Bᵀᴼᵀ(Sᵖ, Pᴮᵀᴼᵀ)\n\nReturn total borate concentration in mol/kg-SW given practical salinity, Sᵖ. References: Uppström (1974), cited by  Dickson et al. (2007, chapter 5, p 10)             Millero (1982) cited in Millero (1995)\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Caᵀᴼᵀ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Caᵀᴼᵀ","text":"Caᵀᴼᵀ(Sᵖ, Pᶜᵃᵀᴼᵀ)\n\nReturn calcium concentration in mol/kg-SW given practical salinity, Sᵖ. References: Culkin and Cox (1966),              Culkin (1967),              Riley and Tongudai (1967)    \n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀCO₂ˢᵒˡ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀCO₂ˢᵒˡ","text":"FCᵀCO₂ˢᵒˡ(Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the dissolved and hydrated CO₂ concentration in seawater given the total carbon concentration Cᵀ, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀCO₃²⁻-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀCO₃²⁻","text":"FCᵀCO₃²⁻(Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the carbonate concentration in seawater given the total carbon concentration Cᵀ, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀHCO₃⁻-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FCᵀHCO₃⁻","text":"FCᵀHCO₃⁻(Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the bicarbonate ion concentration in seawater given the total carbon concentration Cᵀ, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂CO₂ˢᵒˡ-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂CO₂ˢᵒˡ","text":"FpCO₂CO₂ˢᵒˡ(pCO₂, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the dissolved and hydrated CO₂ concentration in seawater given the pCO₂, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂CO₃²⁻-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂CO₃²⁻","text":"FpCO₂CO₃²⁻(pCO₂, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the carbonate concentration in seawater given the pCO₂, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂HCO₃⁻-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.FpCO₂HCO₃⁻","text":"FpCO₂HCO₃⁻(pCO₂, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the bicarbonate ion concentration in seawater given the pCO₂, pH, and the carbon chemistry coefficients.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fˢⁱᵗₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fˢⁱᵗₖ₁","text":"Fˢⁱᵗₖ₁(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pˢⁱᵗₖ₁)\n\nReturn the first dissociation constant of silicic acid (H4SiO4) in seawater, given  temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pˢⁱᵗₖ₁.\n\nReferences: Yao and Millero (1995) cited by Millero (1995) pH scale  : SWS (according to Dickson et al, 2007) Note      : No pressure correction available Note      : converted here from mol/kg-H2O to mol/kg-sw\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴ²ˢₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴ²ˢₖ₁","text":"Fᴴ²ˢₖ₁(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴴ²ˢₖ₁)\n\nReturn the dissociation constant of hydrogen sulfide in sea-water, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴ²ˢₖ₁.\n\nReferences: Millero et al. (1988) (cited by Millero (1995)             Millero (1995) for pressure correction pH scale  : - SWS (according to Yao and Millero, 1995, p. 82: \"refitted if necessary\")             - Total (according to Lewis and Wallace, 1998) Note      : we stick to SWS here for the time being Note      : the fits from Millero (1995) and Yao and Millero (1995)             derive from Millero et al. (1988), with all the coefficients             multiplied by -ln(10)\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴ²ᴼₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴ²ᴼₖ₁","text":"Fᴴ²ᴼₖ₁(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴴ²ᴼₖ₁)\n\nReturn dissociation constant of water in (mol/kg-SW)^2, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴ²ᴼₖ₁.\n\nReferences: Millero (1995) for value at p_bar = 0             Millero (pers. comm. 1996) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴˢᴼ⁴ₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴˢᴼ⁴ₖ₁","text":"Fᴴˢᴼ⁴ₖ₁(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴴˢᴼ⁴ₖ₁)\n\nReturn the dissociation constant of hydrogen sulfate (bisulfate) , given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴˢᴼ⁴ₖ₁.\n\nReferences: Dickson (1990) – also Handbook (2007)             Millero (1995) for pressure correction pH scale  : free Note      : converted here from mol/kg-H2O to mol/kg-SW\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴᶠᵦ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴᶠᵦ₁","text":"Fᴴᶠᵦ₁(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴴᶠᵦ₁)\n\nReturn the association constant of HF in (mol/kg-SW)^-1, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴᶠᵦ₁.\n\nHF <-> H⁺ + F⁻ \n\nReferences: Dickson and Riley (1979)             Millero (1995) for pressure correction pH scale  : free Note      : converted here from mol/kg-H2O to mol/kg-SW\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴᶠₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴴᶠₖ₁","text":"Fᴴᶠₖ₁(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴴᶠₖ₁)\n\nReturn the dissociation constant for hydrogen fluoride in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴴᶠₖ₁.\n\nHF <-> H⁺ + F⁻ \n\nReferences: Perez and Fraga (1987)             Millero (1995) for pressure correction pH scale  : Total (according to Handbook, 2007\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴺᴴ⁴ₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴺᴴ⁴ₖ₁","text":"Fᴺᴴ⁴ₖ₁(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴺᴴ⁴ₖ₁)\n\nReturn the dissociation constant of ammonium in sea-water [mol/kg-SW], given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴺᴴ⁴ₖ₁.\n\nReferences: Yao and Millero (1995)             Millero (1995) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₁","text":"Fᴾᴼ⁴ₖ₁(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴾᴼ⁴ₖ₁)\n\nReturn the first dissociation constant of phosphoric acid (H3PO4) in seawater, given  temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴾᴼ⁴ₖ₁.\n\nReferences: Yao and Millero (1995)             Millero (1995) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₂","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₂","text":"Fᴾᴼ⁴ₖ₂(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴾᴼ⁴ₖ₂)\n\nReturn the second dissociation constant of phosphoric acid (H3PO4) in seawater, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴾᴼ⁴ₖ₂.\n\nReferences: Yao and Millero (1995)             Millero (1995) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₃","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᴾᴼ⁴ₖ₃","text":"Fᴾᴼ⁴ₖ₃(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴾᴼ⁴ₖ₃)\n\nReturn the third dissociation constant of phosphoric acid (H3PO4) in seawater, given  temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴾᴼ⁴ₖ₃.\n\nReferences: Yao and Millero (1995)             Millero (1995) for pressure correction pH scale  : SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵀᴼᵀ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵀᴼᵀ","text":"Fᵀᴼᵀ(Sᵖ, Pᶠᵀᴼᵀ)\n\nReturn total fluoride concentration in mol/kg-SW given practical salinity, Sᵖ. References: Culkin (1965) (???)\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ","text":"Fᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ)\n\nReturn stoichiometric solubility product, Ω, of aragonite in seawater, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᵃʳᵃᵍᵒⁿⁱᵗᵉₛₚ.\n\nReferences: Mucci (1983)             Millero (1979) for pressure correction pH scale  : N/A Units     : (mol/kg-SW)^2\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵇₖ₁","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵇₖ₁","text":"Fᵇₖ₁(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᴮₖ₁)\n\nReturn boric acid dissociation constant in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᴮₖ₁.\n\nReferences: Dickson (1990, eq. 23) – also Handbook (2007, eq. 37)             Millero (1979) pressure correction pH scale  : total\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₀","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₀","text":"Fᵈⁱᶜₖ₀(Θᴷ, Sᵖ, Pᵈⁱᶜₖ₀)\n\nReturn hydration constant of CO₂ in (mol/kg-SW)/atm given temperature  in K, Θᴷ, practical salinity, Sᵖ, and coefficients, Pᵈⁱᶜₖ₀.\n\nCO₂ + H₂O <-> H₂CO₃\n\nReferences: Weiss (1979) pH scale  : N/A Note      : currently no pressure correction\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ᵣ₉₃","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ᵣ₉₃","text":"Fᵈⁱᶜₖ₁ᵣ₉₃(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᵈⁱᶜₖ₁ᵣ₉₃)\n\nReturn the first dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure,  Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₁ᵣ₉₃.\n\nH₂CO₃ <-> HCO₃⁻ + H⁺\n\nReferences: Roy et al. (1993) – also Handbook (1994)             Millero (1979) pressure correction pH scale  : Total Valid range: T:  0-45  S:  5-45. Note      : converted here from mol/kg-H2O to mol/kg-SW\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ₗ₀₀","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ₗ₀₀","text":"Fᵈⁱᶜₖ₁ₗ₀₀(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᵈⁱᶜₖ₁ₗ₀₀)\n\nReturn the first dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure,  Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₁ₗ₀₀.\n\nH₂CO₃ <-> HCO₃⁻ + H⁺\n\nReferences: Luecker et al. (2000) – also Handbook (2007)             Millero (1979) pressure correction pH scale:   Total\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ₘ₉₅","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₁ₘ₉₅","text":"Fᵈⁱᶜₖ₁ₘ₉₅(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᵈⁱᶜₖ₁ₘ₉₅)\n\nReturn the first dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure,  Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₁ₘ₉₅.\n\nH₂CO₃ <-> HCO₃⁻ + H⁺\n\nReferences: Millero (1995, eq 50 – ln K1(COM))              Millero (1982) pressure correction pH scale:   SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ᵣ₉₃","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ᵣ₉₃","text":"Fᵈⁱᶜₖ₂ᵣ₉₃(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᵈⁱᶜₖ₂ᵣ₉₃)\n\nReturn the second dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₂ᵣ₉₃.\n\nHCO₃⁻ <-> CO₃²⁻ + H⁺\n\nReferences: Roy et al. (1993) – also Handbook (1994)             Millero (1979) pressure correction pH scale  : Total Valid range: T:  0-45  S:  5-45. Note      : converted here from mol/kg-H2O to mol/kg-SW\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ₗ₀₀","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ₗ₀₀","text":"Fᵈⁱᶜₖ₂ₗ₀₀(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᵈⁱᶜₖ₂ₗ₀₀)\n\nReturn the second dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₂ₗ₀₀.\n\nHCO₃⁻ <-> CO₃²⁻ + H⁺\n\nReferences: Luecker et al. (2000) – also Handbook (2007)             Millero (1979) pressure correction pH scale:   Total\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ₘ₉₅","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᵈⁱᶜₖ₂ₘ₉₅","text":"Fᵈⁱᶜₖ₂ₘ₉₅(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᵈⁱᶜₖ₂ₘ₉₅)\n\nReturn the second dissociation constant of carbonic acid in mol/kg-SW, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᵈⁱᶜₖ₂ₘ₉₅.\n\nHCO₃⁻ <-> CO₃²⁻ + H⁺\n\nReferences: Millero (1995, eq 51 – ln K2(COM))             Millero (1979) pressure correction pH scale:   SWS\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᶜᵃˡᶜⁱᵗᵉₛₚ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.Fᶜᵃˡᶜⁱᵗᵉₛₚ","text":"Fᶜᵃˡᶜⁱᵗᵉₛₚ(Θᴷ, Sᵖ, Δpᵦₐᵣ, Pᶜᵃˡᶜⁱᵗᵉₛₚ)\n\nReturn the stoichiometric solubility product of calcite, Ω, in seawater, given temperature in K, Θᴷ, practical salinity, Sᵖ, applied pressure, Δpᵦₐᵣ, and coefficients, Pᶜᵃˡᶜⁱᵗᵉₛₚ\n\nReferences: Mucci (1983)             Millero (1995) for pressure correction pH scale  : N/A Units     : (mol/kg-SW)^2\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₛoverH⁺₃-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₛoverH⁺₃","text":"H⁺ₛoverH⁺₃(Θᴷ, Sᵖ, Δpᵦₐᵣ)\n\nReturn the ratio HSWS/Hfree as a @inline function of salinity, Sᵖ.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₛoverH⁺ₜ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₛoverH⁺ₜ","text":"H⁺ₛoverH⁺ₜ(Θᴷ, Sᵖ, Δpᵦₐᵣ)\n\nReturn the ratio HSWS/HTot as a @inline function of salinity, Sᵖ. Reference:  Munhoven pH scale:   all\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₜoverH⁺₃-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.H⁺ₜoverH⁺₃","text":"H⁺ₜoverH⁺₃(Θᴷ, Sᵖ, Δpᵦₐᵣ)\n\nReturn the ratio HTot/Hfree as a @inline function of salinity, Sᵖ. Reference:  Munhoven pH scale:   N/A\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.H₂Oˢʷ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.H₂Oˢʷ","text":"H₂Oˢʷ(Sᵖ, Pᴴ²⁰ˢʷ)\n\nReturn the mass of pure water in one kg of seawater of practical salinity, Sᵖ. References: \"libthdyct\" – derived by Munhoven (1997) from data by Millero (1982)             \"Handbook (2007)\" – Handbook (2007) pH scale:   N/A\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.SO₄ᵀᴼᵀ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.SO₄ᵀᴼᵀ","text":"SO₄ᵀᴼᵀ(Sᵖ, Pˢᴼ⁴ᵀᴼᵀ)\n\nReturn total sulfate concentration in mol/kg-SW given practical salinity, Sᵖ. References: Morris, A.W. and Riley, J.P. (1966) quoted in Handbook (2007)\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.μₛ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.μₛ","text":"μₛ(Sᵖ)\n\nReturn ionic strength in mol/kg-SW, for given practical salinity, Sᵖ. References: \"libthdyct\" – derived by Munhoven (1997) from data by Millero (1982)             \"Handbook (2007)\" – Handbook (2007) pH scale:   N/A\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FABᵀ-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FABᵀ","text":"function FABᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FACᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FACᵀ","text":"function FACᵀ(Cᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAFᵀ-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAFᵀ","text":"function FAFᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAH₂O-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAH₂O","text":"function FAH₂O(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAH₂Sᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAH₂Sᵀ","text":"function FAH₂Sᵀ(H₂Sᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FANH₄ᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FANH₄ᵀ","text":"function FANH₄ᵀ(NH₄ᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAPᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAPᵀ","text":"function FAPᵀ(Pᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FASO₄ᵀ-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FASO₄ᵀ","text":"function FASO₄ᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FASiᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FASiᵀ","text":"function FASiᵀ(Siᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAᵀ-NTuple{8, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FAᵀ","text":"function FAᵀ(Cᵀ, Aᵀ, Bᵀ, Pᵀ, Siᵀ,  SO₄ᵀ, Fᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\nEvaluate the rational function form of the total alkalinity-pH equation\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FH⁺ᵢₙᵢ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FH⁺ᵢₙᵢ","text":"FH⁺ᵢₙᵢ(Aᵀ, Cᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\nCalculates the root for the 2nd order approximation of the  Cᵀ-Bᵀ-Aᶜ equation for H+  around the local minimum, if it exists.\n\nReturns * 1e-03 if Aᶜ <= 0          * 1e-10 if Aᶜ >= 2Cᵀ + Bᵀ          * 1e-07 if 0 < Aᶜ < 2Cᵀ + Bᵀ             and the 2nd order approximation does not have a solution\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FboundsAᵀₙₕ₂ₒ-NTuple{6, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.FboundsAᵀₙₕ₂ₒ","text":" FboundsAᵀₙₕ₂ₒ(\n    Cᵀ, Pᵀ, Siᵀ, NH₄ᵀ=0, H₂Sᵀ=0, Pᶜᵒᵉᶠᶠ\n )\n\nCalculate the lower and upper bounds of the \"non-water-selfionization\"  contributions to total alkalinity.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.Fᵖᴴᵤₙᵢᵣₒ","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.Fᵖᴴᵤₙᵢᵣₒ","text":"Fᵖᴴᵤₙᵢᵣₒ(Aᵀ, Cᵀ, Pᵀ, Siᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the pH of seawater given the total alkalinity Aᵀ, total carbon Cᵀ, total phosphate Pᵀ, total silicate Siᵀ, and the carbon chemistry coefficients. Uses the SolveSAPHE package (Munhoven et al., 2013), a universal, robust, pH  solver that converges from any given initial value.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Bᵀ-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Bᵀ","text":"function F∂A∂Bᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Cᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Cᵀ","text":"F∂A∂Cᵀ(Cᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Fᵀ-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Fᵀ","text":"function F∂A∂Fᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂H₂O-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂H₂O","text":"function F∂A∂H₂O(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂H₂Sᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂H₂Sᵀ","text":"function F∂A∂H₂Sᵀ(H₂Sᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂NH₄ᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂NH₄ᵀ","text":"function F∂A∂NH₄ᵀ(NH₄ᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Pᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Pᵀ","text":"function F∂A∂Pᵀ(Pᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂SO₄ᵀ-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂SO₄ᵀ","text":"function F∂A∂SO₄ᵀ(H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Siᵀ-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.F∂A∂Siᵀ","text":"function F∂A∂Siᵀ(Siᵀ, H⁺, Pᶜᵒᵉᶠᶠ)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.BO₄H₄⁻-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.BO₄H₄⁻","text":"BO₄H₄⁻(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate borate (B(OH)₄⁻) contribution to Aᶜ using salinity as a proxy\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾-NTuple{6, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾","text":"Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾(Aᵀ, pCO₂, Pᵀ, Siᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nSolve for ocean DIC given total Alkalinity and pCO₂\n\nEstimate H⁺ (hydrogen ion conc) using estimate of Aᶜ, carbonate alkalinity after (Follows et al., 2006)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾-NTuple{6, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾","text":"Fᵖᶜᵒ²⁽ᴬᵀ⁺ᶜᵀ⁾(Aᵀ, Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nSolve for ocean pCO₂ given total Alkalinity and DIC\n\nEstimate H⁺ (hydrogen ion conc) using estimate of Aᶜ, carbonate alkalinity after (Follows et al., 2006)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HF-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HF","text":"HF(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the hydrogen fluoride (HF) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HPO₄²⁻-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HPO₄²⁻","text":"HPO₄²⁻(Pᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the monohydrogen phosphate (HPO₄²⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HSO₄⁻-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.HSO₄⁻","text":"HSO₄⁻(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the hydrogen sulphate (HSO₄⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H⁺ᶠʳᵉᵉ-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H⁺ᶠʳᵉᵉ","text":"H⁺ᶠʳᵉᵉ(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the \"Free\" H⁺ contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H₂PO₄⁻-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H₂PO₄⁻","text":"H₂PO₄⁻(Pᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the dihydrogen phosphate (H₂PO₄⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H₃PO₄-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.H₃PO₄","text":"H₃PO₄(Pᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate orthophosphoric acid (H₃PO₄) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.OH⁻-Tuple{Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.OH⁻","text":"OH⁻(pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the hydroxide (OH⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.PO₄³⁻-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.PO₄³⁻","text":"PO₄³⁻(Pᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the phosphate (PO₄³⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.SiO₄H₃⁻-Tuple{Any, Any, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.SiO₄H₃⁻","text":"SiO₄H₃⁻(Siᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nCalculate the silicate (SiO(OH)₃⁻) contribution to Aᶜ\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾-NTuple{4, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾","text":"Fᵖᴴ⁽ᴬᵀ⁺ᵖᶜᵒ²⁾(Aᵀ, pCO₂ᵃᵗᵐ, pH, Pᶜᵒᵉᶠᶠ)\n\nSolve for DIC given total Alkalinity and pCO₂\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾-NTuple{4, Any}","page":"Private","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾","text":"Fᵖᴴ⁽ᴬᵀ⁺ᶜᵀ⁾(Aᵀ, Cᵀ, pH, Pᶜᵒᵉᶠᶠ)\n\nSolve for ocean pCO₂ given total Alkalinity and DIC\n\n\n\n\n\n","category":"method"},{"location":"#ClimaOceanBiogeochemistry","page":"Home","title":"ClimaOceanBiogeochemistry","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ClimaOceanBiogeochemistry.jl provides biogeochemistry models that integrate with Oceananigans.jl and ClimaOcean.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See also the Oceananigans documentation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"ClimaOceanBiogeochemistry.jl is developed by the Climate Modeling Alliance and heroic external collaborators.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To add ClimaOceanBiogeochemistry.jl to your local environment, type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> Pkg.add(\"https://github.com/CliMA/ClimaOceanBiogeochemistry.jl.git\")","category":"page"},{"location":"library/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Documentation for ClimaOceanBiogeochemistry.jl's public interface.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"See the Internals section of the manual for internal package docs covering all submodules.","category":"page"},{"location":"library/public/#ClimaOceanBiogeochemistry","page":"Public","title":"ClimaOceanBiogeochemistry","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [ClimaOceanBiogeochemistry, \n           ClimaOceanBiogeochemistry.CarbonSystemSolvers,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver,\n           ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver]\nPrivate = false","category":"page"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.UniversalRobustCarbonSystem-Union{Tuple{}, Tuple{FT}, Tuple{FT, FT}, Tuple{FT, FT, FT}, NTuple{4, FT}, NTuple{5, FT}, NTuple{6, FT}, NTuple{7, FT}, NTuple{8, FT}, NTuple{9, FT}} where FT","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.UniversalRobustCarbonSolver.UniversalRobustCarbonSystem","text":"UniversalRobustCarbonSystem(\n        Θ       :: FT = 25.0,\n        Sᴬ      :: FT = 35.0,\n        Δpᵦₐᵣ   :: FT = 0.0,\n        Cᵀ      :: FT = 2050.0e-6,\n        Aᵀ      :: FT = 2350.0e-6,\n        Pᵀ      :: FT = 1.0e-6,\n        Siᵀ     :: FT = 15.0e-6,\n        pH      :: FT = 8.0,\n        pCO₂ᵃᵗᵐ :: FT = 280.0e-6,\n        )\n\nUses the Munhoven (2013) SolveSAPHE package to solve the distribution of carbon species\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.AlkalinityCorrectionCarbonSystem-Union{Tuple{}, Tuple{FT}, Tuple{FT, FT}, Tuple{FT, FT, FT}, NTuple{4, FT}, NTuple{5, FT}, NTuple{6, FT}, NTuple{7, FT}, NTuple{8, FT}, NTuple{9, FT}} where FT","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.AlkalinityCorrectionCarbonSolver.AlkalinityCorrectionCarbonSystem","text":"AlkalinityCorrectionCarbonSystem(\n        Θ       :: FT = 25.0,\n        Sᴬ      :: FT = 35.0,\n        Δpᵦₐᵣ   :: FT = 0.0,\n        Cᵀ      :: FT = 2050.0e-6,\n        Aᵀ      :: FT = 2350.0e-6,\n        Pᵀ      :: FT = 1.0e-6,\n        Siᵀ     :: FT = 15.0e-6,\n        pH      :: FT = 8.0,\n        pCO₂ᵃᵗᵐ :: FT = 280.0e-6,\n        )\n\nUses the Follows et al (2006) method to solve the distribution of carbon species\n\n\n\n\n\n","category":"method"},{"location":"library/public/#ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.DirectCubicCarbonSystem-Union{Tuple{}, Tuple{FT}, Tuple{FT, FT}, Tuple{FT, FT, FT}, NTuple{4, FT}, NTuple{5, FT}, NTuple{6, FT}, NTuple{7, FT}} where FT","page":"Public","title":"ClimaOceanBiogeochemistry.CarbonSystemSolvers.DirectCubicCarbonSolver.DirectCubicCarbonSystem","text":"DirectCubicCarbonSystem(\n        Θ       :: FT = 25.0,\n        Sᴬ      :: FT = 35.0,\n        Δpᵦₐᵣ   :: FT = 0.0,\n        Cᵀ      :: FT = 2050.0e-6,\n        Aᵀ      :: FT = 2350.0e-6,\n        pH      :: FT = 8.0,\n        pCO₂ᵃᵗᵐ :: FT = 280.0e-6,\n        )\n\nDirectCubicCarbonSolver solves a cubic equation in terms of [H⁺];  Not for serious use, but as a placeholder and for testing purposes\n\n\n\n\n\n","category":"method"}]
}
